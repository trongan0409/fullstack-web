[{"E:\\fullstack\\reactjs\\src\\index.js":"1","E:\\fullstack\\reactjs\\src\\serviceWorker.js":"2","E:\\fullstack\\reactjs\\src\\redux.js":"3","E:\\fullstack\\reactjs\\src\\containers\\App.js":"4","E:\\fullstack\\reactjs\\src\\hoc\\IntlProviderWrapper.js":"5","E:\\fullstack\\reactjs\\src\\hoc\\authentication.js":"6","E:\\fullstack\\reactjs\\src\\routes\\Login.js":"7","E:\\fullstack\\reactjs\\src\\routes\\Home.js":"8","E:\\fullstack\\reactjs\\src\\containers\\Header\\Header.js":"9","E:\\fullstack\\reactjs\\src\\routes\\System.js":"10","E:\\fullstack\\reactjs\\src\\components\\ConfirmModal.js":"11","E:\\fullstack\\reactjs\\src\\components\\CustomToast.js":"12","E:\\fullstack\\reactjs\\src\\store\\reducers\\rootReducer.js":"13","E:\\fullstack\\reactjs\\src\\store\\actions\\actionTypes.js":"14","E:\\fullstack\\reactjs\\src\\utils\\index.js":"15","E:\\fullstack\\reactjs\\src\\components\\Navigator.js":"16","E:\\fullstack\\reactjs\\src\\containers\\Header\\menuApp.js":"17","E:\\fullstack\\reactjs\\src\\components\\CustomScrollbars.js":"18","E:\\fullstack\\reactjs\\src\\store\\reducers\\adminReducer.js":"19","E:\\fullstack\\reactjs\\src\\store\\reducers\\appReducer.js":"20","E:\\fullstack\\reactjs\\src\\store\\reducers\\userReducer.js":"21","E:\\fullstack\\reactjs\\src\\services\\adminService.js":"22","E:\\fullstack\\reactjs\\src\\containers\\System\\UserManage.js":"23","E:\\fullstack\\reactjs\\src\\containers\\System\\RegisterPackageGroupOrAcc.js":"24","E:\\fullstack\\reactjs\\src\\store\\actions\\index.js":"25","E:\\fullstack\\reactjs\\src\\utils\\constant.js":"26","E:\\fullstack\\reactjs\\src\\utils\\KeyCodeUtils.js":"27","E:\\fullstack\\reactjs\\src\\utils\\LanguageUtils.js":"28","E:\\fullstack\\reactjs\\src\\utils\\ToastUtil.js":"29","E:\\fullstack\\reactjs\\src\\utils\\CommonUtils.js":"30","E:\\fullstack\\reactjs\\src\\axios.js":"31","E:\\fullstack\\reactjs\\src\\store\\actions\\appActions.js":"32","E:\\fullstack\\reactjs\\src\\store\\actions\\userActions.js":"33","E:\\fullstack\\reactjs\\src\\config.js":"34","E:\\fullstack\\reactjs\\src\\containers\\Auth\\Login.js":"35","E:\\fullstack\\reactjs\\src\\services\\index.js":"36","E:\\fullstack\\reactjs\\src\\services\\userService.js":"37","E:\\fullstack\\reactjs\\src\\containers\\System\\ModalUser.js":"38","E:\\fullstack\\reactjs\\src\\utils\\emitter.js":"39","E:\\fullstack\\reactjs\\src\\containers\\System\\ModalEditUser.js":"40","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomePage.js":"41","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomeHeader.js":"42","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\SelfDesign.js":"43","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\ShareNews.js":"44","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\About.js":"45","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomeFooter.js":"46","E:\\fullstack\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js":"47","E:\\fullstack\\reactjs\\src\\store\\actions\\adminActions.js":"48","E:\\fullstack\\reactjs\\src\\containers\\System\\Admin\\TableManageUser.js":"49","E:\\fullstack\\reactjs\\src\\containers\\System\\Product\\ProductManage.js":"50","E:\\fullstack\\reactjs\\src\\containers\\System\\Product\\TableManageProduct.js":"51","E:\\fullstack\\reactjs\\src\\store\\actions\\productActions.js":"52","E:\\fullstack\\reactjs\\src\\store\\reducers\\productReducer.js":"53","E:\\fullstack\\reactjs\\src\\services\\ProductService.js":"54","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\Product.js":"55","E:\\fullstack\\reactjs\\src\\containers\\System\\Posts\\PostsManage.js":"56","E:\\fullstack\\reactjs\\src\\store\\reducers\\postsReducer.js":"57","E:\\fullstack\\reactjs\\src\\store\\actions\\postsActions.js":"58","E:\\fullstack\\reactjs\\src\\services\\PostsService.js":"59","E:\\fullstack\\reactjs\\src\\containers\\System\\Posts\\TableManagePosts.js":"60","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\ProductDetail.js":"61","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\ProductRecommend.js":"62","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\PostsDetail.js":"63","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\PostsRecommend.js":"64"},{"size":926,"mtime":1675704122077,"results":"65","hashOfConfig":"66"},{"size":5086,"mtime":1675704122099,"results":"67","hashOfConfig":"66"},{"size":1477,"mtime":1675704122078,"results":"68","hashOfConfig":"66"},{"size":3919,"mtime":1686415276057,"results":"69","hashOfConfig":"66"},{"size":1095,"mtime":1675704122077,"results":"70","hashOfConfig":"66"},{"size":789,"mtime":1676469341465,"results":"71","hashOfConfig":"66"},{"size":5752,"mtime":1675704122078,"results":"72","hashOfConfig":"66"},{"size":764,"mtime":1686668969121,"results":"73","hashOfConfig":"66"},{"size":2547,"mtime":1685995177901,"results":"74","hashOfConfig":"66"},{"size":1962,"mtime":1685776025277,"results":"75","hashOfConfig":"66"},{"size":3862,"mtime":1675704122045,"results":"76","hashOfConfig":"66"},{"size":2282,"mtime":1675704122046,"results":"77","hashOfConfig":"66"},{"size":1120,"mtime":1685789647213,"results":"78","hashOfConfig":"66"},{"size":3551,"mtime":1686685461851,"results":"79","hashOfConfig":"66"},{"size":259,"mtime":1684568098281,"results":"80","hashOfConfig":"66"},{"size":9326,"mtime":1675704122049,"results":"81","hashOfConfig":"66"},{"size":1733,"mtime":1685995382658,"results":"82","hashOfConfig":"66"},{"size":3173,"mtime":1675704122046,"results":"83","hashOfConfig":"66"},{"size":1644,"mtime":1685124234659,"results":"84","hashOfConfig":"66"},{"size":1122,"mtime":1685295046670,"results":"85","hashOfConfig":"66"},{"size":830,"mtime":1684793866216,"results":"86","hashOfConfig":"66"},{"size":361,"mtime":1675704122099,"results":"87","hashOfConfig":"66"},{"size":6459,"mtime":1685208039778,"results":"88","hashOfConfig":"66"},{"size":638,"mtime":1675704122076,"results":"89","hashOfConfig":"66"},{"size":157,"mtime":1685789925196,"results":"90","hashOfConfig":"66"},{"size":530,"mtime":1686415232522,"results":"91","hashOfConfig":"66"},{"size":684,"mtime":1675704122103,"results":"92","hashOfConfig":"66"},{"size":961,"mtime":1675704122103,"results":"93","hashOfConfig":"66"},{"size":3001,"mtime":1675704122103,"results":"94","hashOfConfig":"66"},{"size":355,"mtime":1685201980856,"results":"95","hashOfConfig":"66"},{"size":337,"mtime":1676467662415,"results":"96","hashOfConfig":"66"},{"size":448,"mtime":1684663184531,"results":"97","hashOfConfig":"66"},{"size":418,"mtime":1684793881867,"results":"98","hashOfConfig":"66"},{"size":445,"mtime":1675704612522,"results":"99","hashOfConfig":"66"},{"size":6426,"mtime":1686722886762,"results":"100","hashOfConfig":"66"},{"size":59,"mtime":1676364464437,"results":"101","hashOfConfig":"66"},{"size":981,"mtime":1684870085390,"results":"102","hashOfConfig":"66"},{"size":8124,"mtime":1684568549386,"results":"103","hashOfConfig":"66"},{"size":159,"mtime":1684568076770,"results":"104","hashOfConfig":"66"},{"size":8302,"mtime":1684573571830,"results":"105","hashOfConfig":"66"},{"size":1280,"mtime":1686687676350,"results":"106","hashOfConfig":"66"},{"size":5731,"mtime":1688588028943,"results":"107","hashOfConfig":"66"},{"size":3091,"mtime":1686691131105,"results":"108","hashOfConfig":"66"},{"size":2974,"mtime":1686420798763,"results":"109","hashOfConfig":"66"},{"size":2340,"mtime":1688588461720,"results":"110","hashOfConfig":"66"},{"size":3524,"mtime":1688583615009,"results":"111","hashOfConfig":"66"},{"size":13891,"mtime":1685995507279,"results":"112","hashOfConfig":"66"},{"size":5030,"mtime":1685996758639,"results":"113","hashOfConfig":"66"},{"size":3358,"mtime":1685996864308,"results":"114","hashOfConfig":"66"},{"size":14326,"mtime":1686725246462,"results":"115","hashOfConfig":"66"},{"size":3417,"mtime":1685996971067,"results":"116","hashOfConfig":"66"},{"size":7388,"mtime":1686687260297,"results":"117","hashOfConfig":"66"},{"size":3829,"mtime":1686685559468,"results":"118","hashOfConfig":"66"},{"size":1161,"mtime":1686685634505,"results":"119","hashOfConfig":"66"},{"size":4922,"mtime":1688585437316,"results":"120","hashOfConfig":"66"},{"size":10377,"mtime":1686057176489,"results":"121","hashOfConfig":"66"},{"size":2549,"mtime":1686428770699,"results":"122","hashOfConfig":"66"},{"size":5411,"mtime":1686429240879,"results":"123","hashOfConfig":"66"},{"size":952,"mtime":1686428631677,"results":"124","hashOfConfig":"66"},{"size":3140,"mtime":1686421805625,"results":"125","hashOfConfig":"66"},{"size":6037,"mtime":1686693750972,"results":"126","hashOfConfig":"66"},{"size":3599,"mtime":1686692264849,"results":"127","hashOfConfig":"66"},{"size":2373,"mtime":1686680541641,"results":"128","hashOfConfig":"66"},{"size":3366,"mtime":1686679978521,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"1auwe5q",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"132"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"132"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"132"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"132"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"132"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"132"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"132"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"132"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"132"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"132"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"132"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"132"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"132"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"132"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"132"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"132"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"132"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"132"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"132"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"132"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"E:\\fullstack\\reactjs\\src\\index.js",[],["290","291"],"E:\\fullstack\\reactjs\\src\\serviceWorker.js",[],"E:\\fullstack\\reactjs\\src\\redux.js",[],"E:\\fullstack\\reactjs\\src\\containers\\App.js",["292","293"],"import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { userIsAuthenticated, userIsNotAuthenticated } from '../hoc/authentication';\r\nimport { path } from '../utils'\r\nimport Home from '../routes/Home';\r\nimport Login from './Auth/Login';\r\nimport Header from './Header/Header';\r\nimport System from '../routes/System';\r\nimport { CustomToastCloseButton } from '../components/CustomToast';\r\nimport HomePage from './HomePage/HomePage';\r\nimport CustomScrollbars from '../components/CustomScrollbars';\r\nimport ProductDetail from './HomePage/Details/ProductDetail';\r\nimport PostsDetail from './HomePage/Details/PostsDetail';\r\n\r\nclass App extends Component {\r\n\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                        <div className=\"content-container\">\r\n                            <CustomScrollbars style={{ height: '100vh', width: '100%' }}>\r\n                                <Switch>\r\n                                    <Route path={path.HOME} exact component={(Home)} />\r\n                                    <Route path={path.LOGIN} component={userIsNotAuthenticated(Login)} />\r\n                                    <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />\r\n                                    <Route path={path.HOMEPAGE} component={HomePage} />\r\n                                    <Route path={path.PRODUCT_DETAIL} component={ProductDetail} />\r\n                                    <Route path={path.POSTS_DETAIL} component={PostsDetail} />\r\n                                </Switch>\r\n                            </CustomScrollbars>\r\n                        </div>\r\n\r\n                        {/* <ToastContainer\r\n                            className=\"toast-container\" toastClassName=\"toast-item\" bodyClassName=\"toast-item-body\"\r\n                            autoClose={false} hideProgressBar={true} pauseOnHover={false}\r\n                            pauseOnFocusLoss={true} closeOnClick={false} draggable={false}\r\n                            closeButton={<CustomToastCloseButton />}\r\n                        /> */}\r\n                        <ToastContainer\r\n                            position='bottom-right'\r\n                            autoClose={5000}\r\n                            hideProgressBar={false}\r\n                            newestOnTop={false}\r\n                            closeOnClick\r\n                            rtl={false}\r\n                            pauseOnFocusLoss\r\n                            draggable\r\n                            pauseOnHover\r\n                            theme='light'\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","E:\\fullstack\\reactjs\\src\\hoc\\IntlProviderWrapper.js",[],"E:\\fullstack\\reactjs\\src\\hoc\\authentication.js",[],"E:\\fullstack\\reactjs\\src\\routes\\Login.js",["294","295","296"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\nimport * as actions from \"../store/actions\";\r\nimport { KeyCodeUtils, LanguageUtils } from \"../utils\";\r\n\r\nimport userIcon from '../../src/assets/images/user.svg';\r\nimport passIcon from '../../src/assets/images/pass.svg';\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport adminService from '../services/adminService';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.btnLogin = React.createRef();\r\n    }\r\n\r\n    initialState = {\r\n        username: '',\r\n        password: '',\r\n        loginError: ''\r\n    }\r\n\r\n    state = {\r\n        ...this.initialState\r\n    };\r\n\r\n    refresh = () => {\r\n        this.setState({\r\n            ...this.initialState\r\n        })\r\n    }\r\n\r\n    onUsernameChange = (e) => {\r\n        this.setState({ username: e.target.value })\r\n    }\r\n\r\n    onPasswordChange = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n    redirectToSystemPage = () => {\r\n        const { navigate } = this.props;\r\n        const redirectPath = '/system/user-manage';\r\n        navigate(`${redirectPath}`);\r\n    }\r\n\r\n    processLogin = () => {\r\n        const { username, password } = this.state;\r\n\r\n        const { adminLoginSuccess, adminLoginFail } = this.props;\r\n        let loginBody = {\r\n            username: 'admin',\r\n            password: '123456'\r\n        }\r\n        //sucess\r\n        let adminInfo = {\r\n            \"tlid\": \"0\",\r\n            \"tlfullname\": \"Administrator\",\r\n            \"custype\": \"A\",\r\n            \"accessToken\": \"eyJhbGciOiJIU\"\r\n        }\r\n\r\n        adminLoginSuccess(adminInfo);\r\n        this.refresh();\r\n        this.redirectToSystemPage();\r\n        try {\r\n            adminService.login(loginBody)\r\n        } catch (e) {\r\n            console.log('error login : ', e)\r\n        }\r\n\r\n    }\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            if (!this.btnLogin.current || this.btnLogin.current.disabled) return;\r\n            this.btnLogin.current.click();\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handlerKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handlerKeyDown);\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state, callback) => {\r\n            return;\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { username, password, loginError } = this.state;\r\n        const { lang } = this.props;\r\n\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"form_login\">\r\n                        <h2 className=\"title\">\r\n                            <FormattedMessage id=\"login.login\" />\r\n                        </h2>\r\n                        <div className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={userIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.username\", lang)}\r\n                                id=\"username\"\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={username}\r\n                                onChange={this.onUsernameChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div id=\"phone-input-container\" className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={passIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.password\", lang)}\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                value={password}\r\n                                onChange={this.onPasswordChange}\r\n                            />\r\n                        </div>\r\n\r\n                        {loginError !== '' && (\r\n                            <div className='login-error'>\r\n                                <span className='login-error-message'>{loginError}</span>\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"form-group login\">\r\n                            <input\r\n                                ref={this.btnLogin}\r\n                                id=\"btnLogin\"\r\n                                type=\"submit\"\r\n                                className=\"btn\"\r\n                                value={LanguageUtils.getMessageByKey(\"login.login\", lang)}\r\n                                onClick={this.processLogin}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        lang: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        adminLoginSuccess: (adminInfo) => dispatch(actions.adminLoginSuccess(adminInfo)),\r\n        adminLoginFail: () => dispatch(actions.adminLoginFail()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n",["297","298"],"E:\\fullstack\\reactjs\\src\\routes\\Home.js",[],"E:\\fullstack\\reactjs\\src\\containers\\Header\\Header.js",[],"E:\\fullstack\\reactjs\\src\\routes\\System.js",["299"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport UserRedux from '../containers/System/Admin/UserRedux';\r\nimport ProductManage from '../containers/System/Product/ProductManage';\r\nimport PostsManage from '../containers/System/Posts/PostsManage';\r\nimport RegisterPackageGroupOrAcc from '../containers/System/RegisterPackageGroupOrAcc';\r\nimport Header from '../containers/Header/Header';\r\nimport { Fragment } from 'react';\r\n\r\nclass System extends Component {\r\n    render() {\r\n\r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/system/manage-user\" component={UserManage} />\r\n                            <Route path=\"/system/manage-user-redux\" component={UserRedux} />\r\n                            <Route path=\"/system/manage-product\" component={ProductManage} />\r\n                            <Route path=\"/system/manage-posts\" component={PostsManage} />\r\n                            <Route path=\"/system/register-package-group-or-account\" component={RegisterPackageGroupOrAcc} />\r\n                            <Route component={() => { return (<Redirect to={systemMenuPath} />) }} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","E:\\fullstack\\reactjs\\src\\components\\ConfirmModal.js",[],["300","301"],"E:\\fullstack\\reactjs\\src\\components\\CustomToast.js",[],"E:\\fullstack\\reactjs\\src\\store\\reducers\\rootReducer.js",["302"],"import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport admninReducer from \"./adminReducer\";\r\nimport userReducer from \"./userReducer\";\r\nimport productReducer from './productReducer';\r\nimport postsReducer from './postsReducer';\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\n\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: admninReducer,\r\n    product: productReducer,\r\n    posts: postsReducer\r\n})","E:\\fullstack\\reactjs\\src\\store\\actions\\actionTypes.js",[],"E:\\fullstack\\reactjs\\src\\utils\\index.js",[],"E:\\fullstack\\reactjs\\src\\components\\Navigator.js",[],"E:\\fullstack\\reactjs\\src\\containers\\Header\\menuApp.js",[],"E:\\fullstack\\reactjs\\src\\components\\CustomScrollbars.js",[],"E:\\fullstack\\reactjs\\src\\store\\reducers\\adminReducer.js",[],"E:\\fullstack\\reactjs\\src\\store\\reducers\\appReducer.js",[],"E:\\fullstack\\reactjs\\src\\store\\reducers\\userReducer.js",[],"E:\\fullstack\\reactjs\\src\\services\\adminService.js",["303"],"import axios from '../axios';\r\nimport * as queryString from 'query-string';\r\n\r\nconst adminService = {\r\n\r\n    /**\r\n     * Đăng nhập hệ thống\r\n     * {\r\n     *  \"username\": \"string\",\r\n     *  \"password\": \"string\"\r\n     * }\r\n     */\r\n    login(loginBody) {\r\n        return axios.post(`/admin/login`, loginBody)\r\n    },\r\n\r\n};\r\n\r\nexport default adminService;",["304","305"],"E:\\fullstack\\reactjs\\src\\containers\\System\\UserManage.js",["306"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { handleGetAllUsers, createNewUserService, deleteUserService, editUserService } from '../../services/userService';\r\nimport ModalUser from './ModalUser';\r\nimport ModalEditUser from './ModalEditUser';\r\nimport { emitter } from '../../utils/emitter';\r\n\r\nclass UserManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrUsers: [],\r\n            isOpenModalUser: false,\r\n            isOpenModalEditUser: false,\r\n            userEdit: {}\r\n        };\r\n    };\r\n\r\n    async componentDidMount() {\r\n        await this.getUser();\r\n    };\r\n\r\n    getUser = async () => {\r\n        let response = await handleGetAllUsers('ALL');\r\n        console.log('check res: ', response);\r\n        if (response && response.errCode === 0) {\r\n            this.setState({\r\n                arrUsers: response.users,\r\n            })\r\n        };\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        this.setState({\r\n            isOpenModalUser: true,\r\n        })\r\n    };\r\n\r\n    toggleUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUser: !this.state.isOpenModalUser,\r\n        })\r\n    };\r\n\r\n    toggleEditUserModal = () => {\r\n        this.setState({\r\n            isOpenModalEditUser: !this.state.isOpenModalEditUser\r\n        })\r\n    };\r\n\r\n    createNewUser = async (data) => {\r\n        try {\r\n            let response = await createNewUserService(data);\r\n\r\n            if (response && response.message.errCode !== 0) {\r\n                alert(response.message.errMessage);\r\n            } else {\r\n                await this.getUser();\r\n                this.setState({\r\n                    isOpenModalUser: false,\r\n                })\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA');\r\n            };\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n    handleDeleteUser = async (user) => {\r\n        try {\r\n            let response = await deleteUserService(user.id);\r\n            console.log('check res: ', response);\r\n            if (response && response.errCode !== 0) {\r\n                alert(response.errMessage);\r\n            } else {\r\n                await this.getUser();\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    handleEditUser = async (user) => {\r\n        this.setState({\r\n            isOpenModalEditUser: true,\r\n            userEdit: user,\r\n        })\r\n    };\r\n\r\n    editUser = async (user) => {\r\n        try {\r\n            let res = await editUserService(user);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    isOpenModalEditUser: false,\r\n                })\r\n                await this.getUser();\r\n            } else {\r\n                alert(res.errCode);\r\n            };\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let arrUsers = this.state.arrUsers;\r\n        return (\r\n            <div className='users-container'>\r\n                <ModalUser\r\n                    isOpen={this.state.isOpenModalUser}\r\n                    toggleUser={this.toggleUserModal}\r\n                    createNewUser={this.createNewUser}\r\n                />\r\n                {this.state.isOpenModalEditUser &&\r\n                    <ModalEditUser\r\n                        isOpen={this.state.isOpenModalEditUser}\r\n                        toggleEditUser={this.toggleEditUserModal}\r\n                        currentUser={this.state.userEdit}\r\n                        editUser={this.editUser}\r\n                    />\r\n                }\r\n                <div className=\"text-center title\">User Manage</div>\r\n                <div className='add-user'>\r\n                    <button\r\n                        className='btn btn-primary px-3'\r\n                        onClick={() => { this.handleAddNewUser() }}\r\n                    ><i className='fas fa-plus icon'></i>Add a new user\r\n                    </button>\r\n                </div>\r\n                <div className='users-table'>\r\n                    <table id=\"customers\">\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>Full Name</th>\r\n                            <th>Adress</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Gender</th>\r\n                            <th>Image</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        {arrUsers && arrUsers.map((item, index) => {\r\n                            return (\r\n                                <>\r\n                                    <tr key={index}>\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.fullName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>{item.phoneNumber}</td>\r\n                                        <td>{item.gender}</td>\r\n                                        {/* <td>{item.image}</td> */}\r\n                                        <td>\r\n                                            <button\r\n                                                type='button'\r\n                                                className='btn-edit'\r\n                                                onClick={() => this.handleEditUser(item)}\r\n                                            ><i className='fas fa-pencil-alt'></i></button>\r\n                                            <button\r\n                                                type='button'\r\n                                                className='btn-delete'\r\n                                                onClick={() => this.handleDeleteUser(item)}\r\n                                            ><i className='fas fa-trash'></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\RegisterPackageGroupOrAcc.js",["307","308"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nclass RegisterPackageGroupOrAcc extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                register package group or account\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPackageGroupOrAcc);\r\n","E:\\fullstack\\reactjs\\src\\store\\actions\\index.js",[],"E:\\fullstack\\reactjs\\src\\utils\\constant.js",[],"E:\\fullstack\\reactjs\\src\\utils\\KeyCodeUtils.js",[],"E:\\fullstack\\reactjs\\src\\utils\\LanguageUtils.js",[],"E:\\fullstack\\reactjs\\src\\utils\\ToastUtil.js",[],"E:\\fullstack\\reactjs\\src\\utils\\CommonUtils.js",[],"E:\\fullstack\\reactjs\\src\\axios.js",["309","310"],"import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        const { data } = response;\r\n        return response.data;\r\n    })\r\n\r\nexport default instance;\r\n","E:\\fullstack\\reactjs\\src\\store\\actions\\appActions.js",[],"E:\\fullstack\\reactjs\\src\\store\\actions\\userActions.js",[],"E:\\fullstack\\reactjs\\src\\config.js",["311"],"export default {\r\n    api: {\r\n        API_BASE_URL: \"http://localhost:8000/\",\r\n        ROUTER_BASE_NAME: null,\r\n    },\r\n    app: {\r\n        /**\r\n         * The base URL for all locations. If your app is served from a sub-directory on your server, you'll want to set\r\n         * this to the sub-directory. A properly formatted basename should have a leading slash, but no trailing slash.\r\n         */\r\n        ROUTER_BASE_NAME: null,\r\n    }\r\n};\r\n",["312","313"],"E:\\fullstack\\reactjs\\src\\containers\\Auth\\Login.js",["314","315","316"],"/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { handleLoginApi } from '../../services/userService';\r\nimport { useHistory } from 'react-router';\r\nimport { userLoginSuccess } from '../../store/actions';\r\nimport { withRouter } from 'react-router';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            isShowHidePwd: true,\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    handleOnChangeUserName = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        });\r\n    };\r\n\r\n    handleOnChangePwd = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        });\r\n    };\r\n\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            message: ''\r\n        })\r\n        try {\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if (data && data.errCode !== 0) {\r\n                this.setState({\r\n                    message: data.errMessage\r\n                })\r\n            }\r\n            if (data && data.errCode === 0) {\r\n                this.props.userLoginSuccess(data.dataUser)\r\n                console.log('login succeeds!')\r\n            }\r\n        } catch (e) {\r\n            if (e.response) {\r\n                if (e.response.data) {\r\n                    this.setState({\r\n                        message: e.response.data.errMessage\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    handleShowHidePwd = () => {\r\n        this.setState({\r\n            isShowHidePwd: !this.state.isShowHidePwd\r\n        });\r\n    };\r\n\r\n    handleBackToHomePage = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`)\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className='login-background'>\r\n                <div className='login-intro'></div>\r\n                <div className='login-form'>\r\n                    <div className='container'>\r\n                        <div className='login-content row'>\r\n                            <div className='col-12 title' onClick={() => this.handleBackToHomePage()}>Bai Aquatic</div>\r\n                            <div className='col-12 signin-text text-center'>Chào mừng đến với thủy sinh Bai Aquatic</div>\r\n                            <form className='col-12 form'>\r\n                                <div className='form-group'>\r\n                                    <label>Email:</label>\r\n                                    <input type='text' className='form-control' placeholder='Nhập...' value={this.state.username}\r\n                                        onChange={(event) => { this.handleOnChangeUserName(event) }}></input>\r\n                                </div>\r\n                                <div className='form-group'>\r\n                                    <label>Mật Khẩu:</label>\r\n                                    <div className='custom-pwd-input'>\r\n                                        <input type={this.state.isShowHidePwd ? 'password' : 'text'} className='form-control' placeholder='Nhập...' value={this.state.password}\r\n                                            onChange={(event) => { this.handleOnChangePwd(event) }}></input>\r\n                                        <span onClick={() => { this.handleShowHidePwd() }}><i className={this.state.isShowHidePwd ? 'far fa-eye-slash' : 'far fa-eye'}></i></span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='form-check'>\r\n                                    <input type='checkbox' className='form-check-input'></input>\r\n                                    <label className='form-check-label'>Nhớ mật khẩu</label>\r\n                                    <span className='forgot-pwd'>Quên mật khẩu?</span>\r\n                                </div>\r\n                                <div className='check-message'>{this.state.message}</div>\r\n                                <div className='signin-btn'>\r\n                                    <button type='button' className='btn btn-success signin' onClick={() => this.handleLogin()}>Đăng nhập</button>\r\n                                </div>\r\n                                <div className='signin-other row'>\r\n                                    <div className='col-5 line-1'><hr></hr></div>\r\n                                    <div className='col-2 text-center text-other'>Hoặc</div>\r\n                                    <div className='col-5 line-2'><hr></hr></div>\r\n                                </div>\r\n                                <div className='signin-google'>\r\n                                    <i className='fab fa-google-plus-g google-icon'></i>\r\n                                    <p className='google-text'>Đăng nhập với Google</p>\r\n                                </div>\r\n                                <div className='signin-fb'>\r\n                                    <i className='fab fa-facebook-f fb-icon'></i>\r\n                                    <p className='fb-text'>Đăng nhập với Facebook</p>\r\n                                </div>\r\n                                <div className='create-acc'>\r\n                                    <label>Bạn chưa có tài khoản?</label>\r\n                                    <span className='register'>Đăng ký ngay</span>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        lang: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        //userLoginFail: () => dispatch(actions.userLoginFail()),\r\n        userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\r\n","E:\\fullstack\\reactjs\\src\\services\\index.js",[],"E:\\fullstack\\reactjs\\src\\services\\userService.js",[],"E:\\fullstack\\reactjs\\src\\containers\\System\\ModalUser.js",["317"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { emitter } from '../../utils/emitter';\r\n\r\n\r\nclass ModalUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            fullName: '',\r\n            address: '',\r\n            phoneNumber: '',\r\n            gender: '',\r\n        }\r\n\r\n        this.linsenToEmitter();\r\n    }\r\n\r\n    linsenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                fullName: '',\r\n                address: '',\r\n                phoneNumber: '',\r\n                gender: '',\r\n            })\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleUser();\r\n    };\r\n\r\n    handleOnchange = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    };\r\n\r\n    checkValidate = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'fullName', 'address', 'phoneNumber', 'gender'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidate();\r\n        if (isValid === true) {\r\n            this.props.createNewUser(this.state);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'abcClassname'}\r\n                size='md'\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>Create a new user</ModalHeader>\r\n                <ModalBody>\r\n                    <div class=\"container\">\r\n                        <div class=\"row\">\r\n                            <form action=\"postCRUD\" method=\"post\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputEmail4\">Email</label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        class=\"form-control\"\r\n                                        name=\"email\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'email') }}\r\n                                        value={this.state.email}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputPassword4\">Password</label>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        class=\"form-control\"\r\n                                        name=\"password\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'password') }}\r\n                                        value={this.state.password}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputName\">fullName</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"fullName\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'fullName') }}\r\n                                        value={this.state.fullName}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputAddress\">Address</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"address\"\r\n                                        placeholder=\" Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'address') }}\r\n                                        value={this.state.address}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputPhone\">Phone Number</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"phoneNumber\"\r\n                                        placeholder=\" Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'phoneNumber') }}\r\n                                        value={this.state.phoneNumber}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div>\r\n                                        <label for=\"inputGender\">Gender</label>\r\n                                    </div>\r\n                                    <div class=\"form-check\">\r\n                                        <label class=\"form-check-label\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=''\r\n                                                name=\"gender\" value=\"1\"\r\n                                                onChange={(event) => { this.handleOnchange(event, 'gender') }}\r\n                                            />Male\r\n                                        </label>\r\n                                    </div>\r\n                                    <div class=\"form-check\">\r\n                                        <label class=\"form-check-label\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=''\r\n                                                name=\"gender\"\r\n                                                value=\"0\"\r\n                                                onChange={(event) => { this.handleOnchange(event, 'gender') }}\r\n                                            />Female\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button className='px-3' color=\"primary\" onClick={() => { this.handleAddNewUser() }}>\r\n                        Create\r\n                    </Button>{' '}\r\n                    <Button className='px-3' color=\"secondary\" onClick={() => { this.toggle() }}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n","E:\\fullstack\\reactjs\\src\\utils\\emitter.js",[],"E:\\fullstack\\reactjs\\src\\containers\\System\\ModalEditUser.js",["318","319"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { emitter } from '../../utils/emitter';\r\nimport _ from 'lodash';\r\n\r\n\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            email: '',\r\n            password: '',\r\n            fullName: '',\r\n            address: '',\r\n            phoneNumber: '',\r\n            gender: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = this.props.currentUser;\r\n        if (user && !_.isEmpty(user)) {\r\n            this.setState({\r\n                id: user.id,\r\n                email: user.email,\r\n                password: 'hashcode',\r\n                fullName: user.fullName,\r\n                address: user.address,\r\n                phoneNumber: user.phoneNumber,\r\n                gender: user.gender,\r\n            })\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleEditUser();\r\n    };\r\n\r\n    handleOnchange = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    };\r\n\r\n    checkValidate = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'fullName', 'address', 'phoneNumber', 'gender'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    saveUser = () => {\r\n        let isValid = this.checkValidate();\r\n        if (isValid === true) {\r\n            this.props.editUser(this.state);\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'abcClassname'}\r\n                size='md'\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>Edit User</ModalHeader>\r\n                <ModalBody>\r\n                    <div class=\"container\">\r\n                        <div class=\"row\">\r\n                            <form action=\"postCRUD\" method=\"post\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputEmail4\">Email</label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        class=\"form-control\"\r\n                                        name=\"email\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'email') }}\r\n                                        value={this.state.email}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputPassword4\">Password</label>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        class=\"form-control\"\r\n                                        name=\"password\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'password') }}\r\n                                        value={this.state.password}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputName\">fullName</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"fullName\"\r\n                                        placeholder=\"Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'fullName') }}\r\n                                        value={this.state.fullName}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputAddress\">Address</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"address\"\r\n                                        placeholder=\" Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'address') }}\r\n                                        value={this.state.address}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"inputPhone\">Phone Number</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        class=\"form-control\"\r\n                                        name=\"phoneNumber\"\r\n                                        placeholder=\" Input here...\"\r\n                                        onChange={(event) => { this.handleOnchange(event, 'phoneNumber') }}\r\n                                        value={this.state.phoneNumber}\r\n                                    />\r\n                                </div>\r\n                                <div class=\"form-row\">\r\n                                    <div>\r\n                                        <label for=\"inputGender\">Gender</label>\r\n                                    </div>\r\n                                    <div class=\"form-check\">\r\n                                        <label class=\"form-check-label\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=''\r\n                                                name=\"gender\" value=\"1\"\r\n                                                onChange={(event) => { this.handleOnchange(event, 'gender') }}\r\n                                            />Male\r\n                                        </label>\r\n                                    </div>\r\n                                    <div class=\"form-check\">\r\n                                        <label class=\"form-check-label\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=''\r\n                                                name=\"gender\"\r\n                                                value=\"0\"\r\n                                                onChange={(event) => { this.handleOnchange(event, 'gender') }}\r\n                                            />Female\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button className='px-3' color=\"primary\" onClick={() => { this.saveUser() }}>\r\n                        Save\r\n                    </Button>{' '}\r\n                    <Button className='px-3' color=\"secondary\" onClick={() => { this.toggle() }}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomePage.js",[],"E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomeHeader.js",[],"E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\SelfDesign.js",["320"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './SelfDesign.scss';\r\nimport * as actions from '../../../store/actions';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\nimport { withRouter } from 'react-router';\r\n\r\nclass SelfDesign extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            productsSelfDesign: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSelfDesign();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.productsSelfDesign !== this.props.productsSelfDesign) {\r\n            this.setState({\r\n                productsSelfDesign: this.props.productsSelfDesign\r\n            })\r\n        }\r\n    };\r\n\r\n    handleViewDetailProduct = (product) => {\r\n        console.log('check: ', product);\r\n        if (this.props.history) {\r\n            this.props.history.push(`/product-detail/${product.id}`)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { productsSelfDesign } = this.state;\r\n        let { setting } = this.props;\r\n        return (\r\n            <div className='section-share self-design-section'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'>Bể tự thiết kế</span>\r\n                        <button className='btn-section'>Xem thêm</button>\r\n                    </div>\r\n                    <div className='section-content'>\r\n                        <Slider {...setting}>\r\n                            {productsSelfDesign && productsSelfDesign.length > 0 &&\r\n                                productsSelfDesign.map((item, index) => {\r\n                                    let imageBase64 = '';\r\n                                    if (item.image) {\r\n                                        imageBase64 = new Buffer(item.image, 'base64').toString('binary');\r\n                                    }\r\n                                    return (\r\n                                        <div className='section-img'\r\n                                            onClick={() => this.handleViewDetailProduct(item)}>\r\n                                            <div className='img self-design-section' style={{ backgroundImage: `url(${imageBase64})` }}></div>\r\n                                            <div className='img-title'>{item.nameProduct}</div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        productsSelfDesign: state.product.productsSelfDesign\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getSelfDesign: () => dispatch(actions.getSelfDesignStart())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SelfDesign));\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\ShareNews.js",["321"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\nimport * as actions from '../../../store/actions';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ShareNews extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            setting: this.props.setting,\r\n            posts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAllPosts();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.posts !== this.props.posts) {\r\n            this.setState({\r\n                posts: this.props.posts,\r\n            })\r\n        }\r\n    };\r\n\r\n    handleViewPostsDetail(posts) {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/posts-detail/${posts.id}`)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { posts } = this.state;\r\n        let { setting } = this.state;\r\n        return (\r\n            <div className='section-share share-new-section'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'>Kiến thức chia sẻ & Tin tức</span>\r\n                        <button className='btn-section'>Xem thêm</button>\r\n                    </div>\r\n                    <div className='section-content'>\r\n                        <Slider {...setting}>\r\n                            {posts && posts.length > 0 &&\r\n                                posts.map((item, index) => {\r\n                                    let imageBase64 = '';\r\n                                    if (item.imageLink) {\r\n                                        imageBase64 = new Buffer(item.imageLink, 'base64').toString('binary');\r\n                                    }\r\n                                    return (\r\n                                        <div className='section-img' onClick={() => this.handleViewPostsDetail(item)}>\r\n                                            <div className='img share-new-section' style={{ backgroundImage: `url(${imageBase64})` }}></div>\r\n                                            <div className='img-title'>{item.title}</div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        posts: state.posts.allPosts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllPosts: () => dispatch(actions.getAllPostsStart())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ShareNews));\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\About.js",["322"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nclass About extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='section-share about-section'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <div className='title-section'>Giới thiệu về Thủy sinh</div>\r\n                    </div>\r\n                    <div className='section-about-content'>\r\n                        <div className='content-left'>\r\n                            <iframe\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                src=\"https://www.youtube.com/embed/NdtBtmSNC7o\"\r\n                                title=\"Thư viện Thủy Sinh - Các phong cách chơi Thủy Sinh phổ biến\"\r\n                                frameborder=\"0\"\r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                                allowfullscreen>\r\n                            </iframe>\r\n                        </div>\r\n                        <div className='content-right'>\r\n                            <iframe\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                src=\"https://www.youtube.com/embed/sUL7uC2oFZU\"\r\n                                title=\"Thư viện Thủy Sinh - Bố cục trong Thủy Sinh và một số quy tắc cơ bản\"\r\n                                frameborder=\"0\"\r\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                                allowfullscreen\r\n                            ></iframe>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\HomeFooter.js",["323"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport \"./HomeFooter.scss\";\r\n\r\nclass HomeFooter extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='home-footer-container'>\r\n                <div className='home-footer-content-left'>\r\n                    <div className='home-footer-title'>BeyAquatic\r\n                        <div><hr></hr></div>\r\n                    </div>\r\n                    <div className='home-footer-content'>\r\n                        <h5><b>CÔNG TY TNHH MTV ĐỨC TUẤN</b></h5>\r\n                        <h5><b><i className='fas fa-envelope\">'></i>Địa chỉ: 91 Phan Bội Châu, Phước Vĩnh, TP Huế</b></h5>\r\n                        <h5><b>Điện thoại: 0932 234 591 - 0702 442 524</b></h5>\r\n                        <h5><b>Email: nguyenductuan030@gmail.com</b></h5>\r\n                    </div>\r\n                </div>\r\n                <div className='home-footer-content-cennter'>\r\n                    <div className='home-footer-title'>Bản đồ\r\n                        <div><hr></hr></div>\r\n                    </div>\r\n                    <div className='home-footer-content'>\r\n                        <iframe\r\n                            src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3826.4412956926426!2d107.57799637770917!3d16.453177743758907!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3141a1272651ca5d%3A0x245d225aac9b57a8!2sBey%20aquatic!5e0!3m2!1sen!2s!4v1688578303908!5m2!1sen!2s\"\r\n                            title='Địa chỉ công ty'\r\n                            width=\"100%\"\r\n                            height=\"350\"\r\n                            style={{ border: 0 }}\r\n                            allowfullscreen=\"\"\r\n                            loading=\"lazy\"\r\n                            referrerpolicy=\"no-referrer-when-downgrade\"\r\n                        ></iframe>\r\n                    </div>\r\n                    <div className='footer-bottom'>DESIGN BY BeyAquatic</div>\r\n                </div>\r\n                <div className='home-footer-content-right'>\r\n                    <div className='home-footer-title'>Fanpage\r\n                        <div><hr></hr></div>\r\n                    </div>\r\n                    <div className=\"home-footer-content\">\r\n                        <iframe\r\n                            src=\"https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2Fprofile.php%3Fid%3D100090687517210&tabs=timeline&width=340&height=500&small_header=false&adapt_container_width=true&hide_cover=false&show_facepile=true&appId\"\r\n                            width=\"100%\"\r\n                            height=\"350\"\r\n                            title='link facebook'\r\n                            style={{ border: \"none\", overflow: \"hidden\" }}\r\n                            scrolling=\"no\"\r\n                            frameborder=\"0\"\r\n                            allowfullscreen=\"true\"\r\n                            allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"></iframe>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\Admin\\UserRedux.js",["324"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserRedux.scss';\r\nimport { languages, crudActions, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport LightBox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport TableManageUser from './TableManageUser';\r\n\r\nclass UserRedux extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            genderArray: [],\r\n            roleArray: [],\r\n            previewImageURL: '',\r\n            isOpen: false,\r\n            email: '',\r\n            password: '',\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            gender: '',\r\n            role: '',\r\n            avatar: '',\r\n            action: '',\r\n            userEditId: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenderStart();\r\n        this.props.getRoleStart();\r\n        // try {\r\n        //     let res = await getAllCodeService('gender');\r\n        //     if (res && res.errCode === 0) {\r\n        //         this.setState({\r\n        //             genderArray: res.data\r\n        //         })\r\n        //     }\r\n        //     console.log('check res', res);\r\n        // } catch (e) {\r\n        //     console.log(e);\r\n        // }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, spapshot) {\r\n        if (prevProps.genderRedux !== this.props.genderRedux) {\r\n            let arrGender = this.props.genderRedux;\r\n            this.setState({\r\n                genderArray: arrGender,\r\n                gender: arrGender && arrGender.length > 0 ? arrGender[0].keyMap : ''\r\n            })\r\n        };\r\n\r\n        if (prevProps.roleRedux !== this.props.roleRedux) {\r\n            let arrRole = this.props.roleRedux;\r\n            this.setState({\r\n                roleArray: arrRole,\r\n                role: arrRole && arrRole.length > 0 ? arrRole[0].keyMap : ''\r\n            })\r\n        }\r\n\r\n        if (prevProps.allUsers !== this.props.allUsers) {\r\n            let arrGender = this.props.genderRedux;\r\n            let arrRole = this.props.roleRedux;\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                fullName: '',\r\n                phoneNumber: '',\r\n                address: '',\r\n                gender: arrGender && arrGender.length > 0 ? arrGender[0].keyMap : '',\r\n                role: arrRole && arrRole.length > 0 ? arrRole[0].keyMap : '',\r\n                avatar: '',\r\n                previewImageURL: '',\r\n                action: crudActions.CREATE\r\n            })\r\n        }\r\n    };\r\n\r\n    handleOnChangeImage = async (event) => {\r\n        let fileImage = event.target.files;\r\n        let file = fileImage[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            console.log('check base64 image: ', base64);\r\n            let imageObjectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: imageObjectUrl,\r\n                avatar: base64\r\n            })\r\n        }\r\n    };\r\n\r\n    isOpenImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    handleCreateUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n\r\n        this.props.createNewUser({\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            fullName: this.state.fullName,\r\n            address: this.state.address,\r\n            gender: this.state.gender,\r\n            phoneNumber: this.state.phoneNumber,\r\n            roleId: this.state.role,\r\n            avatar: this.state.avatar\r\n        });\r\n    };\r\n    handleUpdateUser = () => {\r\n        this.props.editUser({\r\n            id: this.state.userEditId,\r\n            fullName: this.state.fullName,\r\n            address: this.state.address,\r\n            gender: this.state.gender,\r\n            phoneNumber: this.state.phoneNumber,\r\n            roleId: this.state.role,\r\n            avatar: this.state.avatar\r\n        });\r\n    };\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({ ...copyState });\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['email', 'password', 'fullName', 'phoneNumber', 'address'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    handleEditUserParent = (user) => {\r\n        let imageBase64 = '';\r\n        if (user.image) {\r\n            imageBase64 = new Buffer(user.image, 'base64').toString('binary');\r\n        }\r\n\r\n        this.setState({\r\n            email: user.email,\r\n            password: 'hashcode',\r\n            fullName: user.fullName,\r\n            phoneNumber: user.phoneNumber,\r\n            address: user.address,\r\n            gender: user.gender,\r\n            role: user.roleId,\r\n            avatar: '',\r\n            previewImageURL: imageBase64,\r\n            action: crudActions.EDIT,\r\n            userEditId: user.id\r\n        })\r\n    };\r\n\r\n    handleClearForm = () => {\r\n        this.setState({\r\n            previewImageURL: '',\r\n            isOpen: false,\r\n            email: '',\r\n            password: '',\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            gender: '',\r\n            role: '',\r\n            avatar: '',\r\n            action: '',\r\n            userEditId: ''\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let genders = this.state.genderArray;\r\n        let roles = this.state.roleArray;\r\n        let language = this.props.language;\r\n\r\n        let { email, password, fullName, phoneNumber, address, gender, role, avatar } = this.state;\r\n\r\n        return (\r\n            <div className='user-redux-container'>\r\n                <div className=\"title\" >QUẢN LÝ NGƯỜI DÙNG</div>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-12 my-3'><FormattedMessage id=\"manage-user.add\" /></div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-user.email\" /></label>\r\n                            <input className='form-control' type='email' value={email}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'email')}\r\n                                disabled={this.state.action === crudActions.EDIT ? true : false}\r\n                            />\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-user.password\" /></label>\r\n                            <input className='form-control' type='password' value={password}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'password')}\r\n                                disabled={this.state.action === crudActions.EDIT ? true : false}\r\n                            />\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-user.fullname\" /></label>\r\n                            <input className='form-control' type='text' value={fullName}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'fullName')} />\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-user.phonenumber\" /></label>\r\n                            <input className='form-control' type='text' value={phoneNumber}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'phoneNumber')} />\r\n                        </div>\r\n                        <div className='col-5'>\r\n                            <label><FormattedMessage id=\"manage-user.address\" /></label>\r\n                            <input className='form-control' type='text' value={address}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'address')} />\r\n                        </div>\r\n                        <div className='col-2'>\r\n                            <label><FormattedMessage id=\"manage-user.gender\" /></label>\r\n                            <select className=\"form-control\" value={gender}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'gender')}>\r\n                                {genders && genders.length > 0 &&\r\n                                    genders.map((item, index) => {\r\n                                        return (\r\n                                            <option key={index} value={item.keyMap}>\r\n                                                {language === languages.VI ? item.valueVi : item.valueEn}\r\n                                            </option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-2'>\r\n                            <label><FormattedMessage id=\"manage-user.roleid\" /></label>\r\n                            <select className=\"form-control\" value={role}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'role')}>\r\n                                {roles && roles.length > 0 &&\r\n                                    roles.map((item, index) => {\r\n                                        return (\r\n                                            <option key={index} value={item.keyMap}>\r\n                                                {language === languages.VI ? item.valueVi : item.valueEn}\r\n                                            </option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-user.image\" /></label>\r\n                            <div className='preview-img-container'>\r\n                                <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                <label className='label-upload' htmlFor=\"previewImg\">Tải ảnh <i className='fas fa-upload'></i></label>\r\n                                <div\r\n                                    className='preview-image'\r\n                                    style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                    onClick={() => this.isOpenImage()}\r\n                                ></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-12 mt-3 mb-4'>\r\n                            <button\r\n                                className={this.state.action === crudActions.EDIT ? \"btn btn-warning\" : 'btn btn-primary'}\r\n                                onClick={this.state.action === crudActions.EDIT ? () => this.handleUpdateUser() : () => this.handleCreateUser()}\r\n                            >\r\n                                {\r\n                                    this.state.action === crudActions.EDIT ?\r\n                                        <FormattedMessage id=\"manage-user.edit\" />\r\n                                        :\r\n                                        <FormattedMessage id=\"manage-user.create\" />\r\n                                }\r\n                            </button>\r\n                            <button\r\n                                className='btn btn-secondary ml-3'\r\n                                onClick={this.handleClearForm}\r\n                            >\r\n                                Làm mới\r\n                            </button>\r\n                        </div>\r\n                        <div className='col-12 mb-5'>\r\n                            <TableManageUser\r\n                                handleEditUserParent={this.handleEditUserParent}\r\n                                action={this.state.action}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <LightBox\r\n                        mainSrc={this.state.previewImageURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genderRedux: state.admin.genders,\r\n        roleRedux: state.admin.roles,\r\n        isLoadingGender: state.admin.isLoadingGender,\r\n        allUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n        getRoleStart: () => dispatch(actions.fetchRoleStart()),\r\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n        editUser: (data) => dispatch(actions.editUser(data))\r\n\r\n        //processLogout: () => dispatch(actions.processLogout()),\r\n        //changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","E:\\fullstack\\reactjs\\src\\store\\actions\\adminActions.js",["325"],"import actionTypes from './actionTypes';\r\nimport { getAllCodeService, createNewUserService, handleGetAllUsers, deleteUserService, editUserService } from '../../services/userService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_GENDER_START })\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderData err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED\r\n})\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_ROLE_START })\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log('fetchRoleData err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\n\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED\r\n})\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            if (res && res.message.errCode === 0) {\r\n                toast.success('Created succeed!');\r\n                dispatch(createUserSuccess());\r\n                dispatch(getAllUserStart());\r\n            } else {\r\n                dispatch(createUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createUserFailed());\r\n            console.log('createUserFailed err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const createUserSuccess = () => ({\r\n    type: 'CREATE_USER_SUCCESS'\r\n})\r\n\r\nexport const createUserFailed = () => ({\r\n    type: 'CREATE_USER_FAILED'\r\n})\r\n\r\nexport const getAllUserStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await handleGetAllUsers(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getAllUserSuccess(res.users.reverse()));\r\n            } else {\r\n                dispatch(getAllUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllUserFailed());\r\n            console.log('getAllUserFailed err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllUserSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_USER_SUCCESS,\r\n    users: data\r\n})\r\n\r\nexport const getAllUserFailed = () => ({\r\n    type: actionTypes.GET_ALL_USER_FAILED\r\n})\r\n\r\nexport const deleteUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Deleted succeed!');\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(getAllUserStart());\r\n            } else {\r\n                dispatch(deleteUserFailed());\r\n                toast.success('Deleted error!');\r\n            }\r\n        } catch (e) {\r\n            toast.success('Deleted error!');\r\n            dispatch(deleteUserFailed());\r\n            console.log('deleteUserFailed err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = (data) => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS,\r\n    users: data\r\n})\r\n\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILED\r\n})\r\n\r\nexport const editUser = (userInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(userInput);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Updated succeed!');\r\n                dispatch(editUserSuccess());\r\n                dispatch(getAllUserStart());\r\n            } else {\r\n                dispatch(editUserFailed());\r\n                toast.success('Updated error!');\r\n            }\r\n        } catch (e) {\r\n            toast.success('Updated error!');\r\n            dispatch(editUserFailed());\r\n            console.log('editUser err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = (data) => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS,\r\n    users: data\r\n})\r\n\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILED\r\n})\r\n\r\n\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\Admin\\TableManageUser.js",["326"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from '../../../store/actions';\r\n\r\nclass TableManageUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userRedux: []\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getAllUsers();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allUsers !== this.props.allUsers) {\r\n            this.setState({ userRedux: this.props.allUsers })\r\n        }\r\n    };\r\n\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteUser(user.id);\r\n    };\r\n\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserParent(user);\r\n    };\r\n\r\n    render() {\r\n        let arrAllUsers = this.state.userRedux;\r\n\r\n        return (\r\n            <div className='users-container mx-0'>\r\n                <table id='TableManageUser'>\r\n                    <tr>\r\n                        <th>Email</th>\r\n                        <th>Họ và Tên</th>\r\n                        <th>Địa chỉ hiện tại</th>\r\n                        <th>Số điện thoại</th>\r\n                        <th>Giới tính</th>\r\n                        {/* <th>Image</th> */}\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    {arrAllUsers && arrAllUsers.length > 0 &&\r\n                        arrAllUsers.map((item, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{item.email}</td>\r\n                                    <td>{item.fullName}</td>\r\n                                    <td>{item.address}</td>\r\n                                    <td>{item.phoneNumber}</td>\r\n                                    <td>{item.gender}</td>\r\n                                    {/* <td>{item.image}</td> */}\r\n                                    <td>\r\n                                        <button\r\n                                            type='button'\r\n                                            className='btn-edit'\r\n                                            onClick={() => this.handleEditUser(item)}\r\n                                        ><i className='fas fa-pencil-alt'></i></button>\r\n                                        <button\r\n                                            onClick={() => { this.handleDeleteUser(item) }}\r\n                                            type='button'\r\n                                            className='btn-delete'\r\n                                        ><i className='fas fa-trash'></i></button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </table>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllUsers: () => dispatch(actions.getAllUserStart()),\r\n        deleteUser: (id) => dispatch(actions.deleteUser(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\Product\\ProductManage.js",["327","328","329"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n//import './ProductManage.scss';\r\nimport { languages, crudActions, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport LightBox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport TableManageProduct from './TableManageProduct';\r\nimport Select from 'react-select';\r\n\r\n\r\nclass ProductManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCodes: [],\r\n            types: [],\r\n            statusProduct: [],\r\n            action: '',\r\n            previewImageURL: '',\r\n            id: '',\r\n            nameProduct: '',\r\n            categoryType: '',\r\n            price: '',\r\n            quantity: '',\r\n            slug: '',\r\n            detail: '',\r\n            status: '',\r\n            image: '',\r\n            isOpen: false,\r\n            selectedProduct: null,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        this.props.getType();\r\n        this.props.getStatus();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, spapshot) {\r\n        if (prevProps.types !== prevState.types) {\r\n            let arrTypes = this.props.types;\r\n            this.setState({\r\n                types: arrTypes,\r\n                categoryType: arrTypes && arrTypes.length > 0 ? arrTypes[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.statusProduct !== prevState.statusProduct) {\r\n            let arrStatus = this.props.statusProduct;\r\n            this.setState({\r\n                statusProduct: arrStatus,\r\n                status: arrStatus && arrStatus.length > 0 ? arrStatus[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.allProducts !== this.props.allProducts) {\r\n            let arrTypes = this.props.types;\r\n            let arrStatus = this.props.statusProduct;\r\n            this.setState({\r\n                nameProduct: '',\r\n                categoryType: arrTypes && arrTypes.length > 0 ? arrTypes[0].keyMap : '',\r\n                price: '',\r\n                quantity: '',\r\n                slug: '',\r\n                detail: '',\r\n                status: arrStatus && arrStatus.length > 0 ? arrStatus[0].keyMap : '',\r\n                image: '',\r\n                previewImageURL: '',\r\n                action: crudActions.CREATE\r\n            })\r\n        }\r\n\r\n\r\n    };\r\n\r\n    isOpenImage = () => {\r\n\r\n    };\r\n\r\n    handleCreateProduct = () => {\r\n        console.log('check state: ', this.state);\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n\r\n        this.props.createProduct({\r\n            nameProduct: this.state.nameProduct,\r\n            categoryType: this.state.categoryType,\r\n            price: this.state.price,\r\n            quantity: this.state.quantity,\r\n            slug: this.state.slug,\r\n            detail: this.state.detail,\r\n            status: this.state.status,\r\n            image: this.state.image\r\n        });\r\n    };\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({ ...copyState });\r\n    };\r\n\r\n    handleOnChangeImage = async (event) => {\r\n        let fileImage = event.target.files;\r\n        let file = fileImage[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            console.log('check base64 image: ', base64);\r\n            let imageObjectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: imageObjectUrl,\r\n                image: base64\r\n            })\r\n        }\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['nameProduct', 'price', 'quantity', 'slug', 'detail', 'previewImageURL'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    handleEditProductParent = (product) => {\r\n        console.log('check product: ', product);\r\n        let imageBase64 = '';\r\n        if (product.image) {\r\n            imageBase64 = new Buffer(product.image, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            id: product.id,\r\n            nameProduct: product.nameProduct,\r\n            categoryType: product.categoryType,\r\n            price: product.price,\r\n            quantity: product.quantity,\r\n            slug: product.slug,\r\n            detail: product.detail,\r\n            status: product.status,\r\n            image: '',\r\n            previewImageURL: imageBase64,\r\n            action: crudActions.EDIT\r\n        })\r\n    };\r\n\r\n    handleUpdateProduct = () => {\r\n        let { image } = this.state;\r\n        if (!image) {\r\n            this.props.editProduct({\r\n                id: this.state.id,\r\n                nameProduct: this.state.nameProduct,\r\n                categoryType: this.state.categoryType,\r\n                price: this.state.price,\r\n                quantity: this.state.quantity,\r\n                slug: this.state.slug,\r\n                detail: this.state.detail,\r\n                status: this.state.status,\r\n            })\r\n        } else {\r\n            this.props.editProduct({\r\n                id: this.state.id,\r\n                nameProduct: this.state.nameProduct,\r\n                categoryType: this.state.categoryType,\r\n                price: this.state.price,\r\n                quantity: this.state.quantity,\r\n                slug: this.state.slug,\r\n                detail: this.state.detail,\r\n                status: this.state.status,\r\n                image: this.state.image,\r\n            })\r\n        }\r\n    };\r\n\r\n    isOpenImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    handleClearForm = () => {\r\n        this.setState({\r\n            action: '',\r\n            previewImageURL: '',\r\n            id: '',\r\n            nameProduct: '',\r\n            categoryType: '',\r\n            price: '',\r\n            quantity: '',\r\n            slug: '',\r\n            detail: '',\r\n            status: '',\r\n            image: '',\r\n            isOpen: false\r\n        })\r\n    };\r\n\r\n    handleChange = (selectedProduct) => {\r\n        this.setState({ selectedProduct }, () =>\r\n            console.log(`Option selected:`, this.state.selectedProduct)\r\n        );\r\n    };\r\n\r\n    render() {\r\n\r\n        let { types } = this.state;\r\n        let { statusProduct } = this.state;\r\n        let { nameProduct, categoryType, price, quantity, slug, detail, status } = this.state;\r\n        let { selectedProduct } = this.state;\r\n\r\n        return (\r\n            <div className='product-container'>\r\n                <div className=\"title\" ><FormattedMessage id=\"manage-product.title\" /></div>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-12 my-3'><FormattedMessage id=\"manage-product.add\" /></div>\r\n                        {/* <div className='col-12 my-3'>\r\n                            <div style={{ width: 300 }}>\r\n                                <Select\r\n                                    value={selectedProduct}\r\n                                    onChange={this.handleChange}\r\n                                    options={options}\r\n                                />\r\n                            </div>\r\n                        </div> */}\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-product.name\" /></label>\r\n                            <input className='form-control' type='text' value={nameProduct}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'nameProduct')} />\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-product.type\" /></label>\r\n                            <select className=\"form-control\" value={categoryType}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'categoryType')}\r\n                            >\r\n                                {types && types.length > 0 &&\r\n                                    types.map((item, index) => {\r\n                                        return (\r\n                                            <option key={index} value={item.keyMap}>{item.valueVi}</option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-2'>\r\n                            <label><FormattedMessage id=\"manage-product.price\" /></label>\r\n                            <input className='form-control' type='text' value={price}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'price')}\r\n                            />\r\n                        </div>\r\n                        <div className='col-2'>\r\n                            <label><FormattedMessage id=\"manage-product.quantity\" /></label>\r\n                            <input className='form-control' type='text' value={quantity}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'quantity')}\r\n                            />\r\n                        </div>\r\n                        <div className='col-2'>\r\n                            <label><FormattedMessage id=\"manage-product.status\" /></label>\r\n                            <select className=\"form-control\" value={status}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'status')}\r\n                            >\r\n                                {statusProduct && statusProduct.length > 0 &&\r\n                                    statusProduct.map((item, index) => {\r\n                                        return (\r\n                                            <option key={index} value={item.keyMap}>{item.valueVi}</option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-4'>\r\n                            <label><FormattedMessage id=\"manage-product.slug\" /></label>\r\n                            <input className='form-control' type='text' value={slug}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'slug')} />\r\n                        </div>\r\n                        <div className='col-5'>\r\n                            <label><FormattedMessage id=\"manage-product.detail\" /></label>\r\n                            <textarea className='form-control' value={detail} rows={1}\r\n                                onChange={(event) => this.handleOnChangeInput(event, 'detail')} />\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <label><FormattedMessage id=\"manage-product.image\" /></label>\r\n                            <div className='preview-img-container'>\r\n                                <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                <label className='label-upload' htmlFor=\"previewImg\">Tải ảnh <i className='fas fa-upload'></i></label>\r\n                                <div\r\n                                    className='preview-image'\r\n                                    style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                    onClick={() => this.isOpenImage()}\r\n                                ></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-12 mt-3 mb-4'>\r\n                            <button\r\n                                className='btn btn-primary'\r\n                                onClick={this.state.action === crudActions.EDIT ? () => this.handleUpdateProduct() : () => this.handleCreateProduct()}\r\n                            >{this.state.action === crudActions.EDIT ?\r\n                                <FormattedMessage id=\"manage-product.save\" />\r\n                                :\r\n                                <FormattedMessage id=\"manage-product.create\" />}\r\n                            </button>\r\n                            <button\r\n                                className='btn btn-secondary ml-3'\r\n                                onClick={this.handleClearForm}\r\n                            >\r\n                                Làm mới\r\n                            </button>\r\n                        </div>\r\n                        <div className='col-12 mb-5'>\r\n                            <TableManageProduct\r\n                                handleEditProductParent={this.handleEditProductParent}\r\n                                action={this.state.action}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <LightBox\r\n                        mainSrc={this.state.previewImageURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        types: state.product.types,\r\n        statusProduct: state.product.statusProduct,\r\n        allProducts: state.product.products\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getType: () => dispatch(actions.getTypeStart()),\r\n        getStatus: () => dispatch(actions.getStatusStart()),\r\n        createProduct: (dataInput) => dispatch(actions.createProductStart(dataInput)),\r\n        editProduct: (product) => dispatch(actions.editProductStart(product))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\Product\\TableManageProduct.js",["330"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageProduct.scss';\r\nimport * as actions from '../../../store/actions';\r\n\r\nclass TableManageProduct extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            productRedux: []\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getAllProduct();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allProducts !== this.props.allProducts) {\r\n            this.setState({ productRedux: this.props.allProducts })\r\n        }\r\n    };\r\n\r\n    handleDeleteProduct = (product) => {\r\n        this.props.deleteProduct(product.id);\r\n    }\r\n\r\n    handleEditUser = (product) => {\r\n        this.props.handleEditProductParent(product);\r\n    };\r\n\r\n    render() {\r\n        let { productRedux } = this.state;\r\n\r\n        return (\r\n            <div className='product-container mx-0'>\r\n                <table id='TableManageProduct'>\r\n                    <tr>\r\n                        <th>Tên sản phẩm</th>\r\n                        <th>Loại</th>\r\n                        <th>Giá tiền</th>\r\n                        <th>Số lượng</th>\r\n                        <th>Đường dẫn</th>\r\n                        <th>Trạng thái</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    {productRedux && productRedux.length > 0 &&\r\n                        productRedux.map((item, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{item.nameProduct}</td>\r\n                                    <td>{item.categoryType}</td>\r\n                                    <td>{item.price}</td>\r\n                                    <td>{item.quantity}</td>\r\n                                    <td>{item.slug}</td>\r\n                                    <td>{item.status}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            type='button'\r\n                                            className='btn-edit'\r\n                                            onClick={() => this.handleEditUser(item)}\r\n                                        ><i className='fas fa-pencil-alt'></i></button>\r\n                                        <button\r\n                                            onClick={() => { this.handleDeleteProduct(item) }}\r\n                                            type='button'\r\n                                            className='btn-delete'\r\n                                        ><i className='fas fa-trash'></i></button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </table>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allProducts: state.product.products\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllProduct: () => dispatch(actions.getAllProductStart()),\r\n        deleteProduct: (id) => dispatch(actions.deleteProductStart(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageProduct);\r\n","E:\\fullstack\\reactjs\\src\\store\\actions\\productActions.js",["331"],"import actionTypes from './actionTypes';\r\nimport {\r\n    handleGetAllProducts,\r\n    handleGetAllCodeService,\r\n    handleCreateProductService,\r\n    handleDeleteProductService,\r\n    handleEditProductService,\r\n    handleGetRecommendProducts,\r\n    handleGetProductsByType\r\n} from '../../services/ProductService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllProductStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = [];\r\n            dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n            if (!id) {\r\n                res = await handleGetAllProducts(\"ALL\");\r\n            } else {\r\n                res = await handleGetAllProducts(id);\r\n            }\r\n            if (res && res.errCode === 0) {\r\n                if (res.data.length > 1) {\r\n                    dispatch(getAllProductSuccess(res.data.reverse()));\r\n                } else {\r\n                    dispatch(getAllProductSuccess(res.data));\r\n                }\r\n\r\n            } else {\r\n                dispatch(getAllProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllProductFailed());\r\n            console.log('getAllProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllProductSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n    products: data\r\n})\r\nexport const getAllProductFailed = () => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n})\r\n\r\nexport const getTypeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_TYPE_START })\r\n            let res = await handleGetAllCodeService('CATEGORY');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getTypeSuccess(res.data));\r\n            } else {\r\n                dispatch(getTypeFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getTypeFailed());\r\n            console.log('getTypeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getTypeSuccess = (data) => ({\r\n    type: actionTypes.GET_TYPE_SUCCESS,\r\n    types: data\r\n})\r\n\r\nexport const getTypeFailed = () => ({\r\n    type: actionTypes.GET_TYPE_FAILED\r\n})\r\n\r\nexport const getStatusStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_STATUS_START })\r\n            let res = await handleGetAllCodeService('STATUS');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getStatusSuccess(res.data));\r\n            } else {\r\n                dispatch(getStatusFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getStatusFailed());\r\n            console.log('getStatusFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getStatusSuccess = (data) => ({\r\n    type: actionTypes.GET_STATUS_SUCCESS,\r\n    statusProduct: data\r\n})\r\nexport const getStatusFailed = () => ({\r\n    type: actionTypes.GET_STATUS_FAILED\r\n})\r\n\r\nexport const createProductStart = (dataInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.CREATE_PRODUCT_START })\r\n            let res = await handleCreateProductService(dataInput);\r\n            if (res && res.message.errCode === 0) {\r\n                toast.success('Created successfully!');\r\n                dispatch(createProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(createProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createProductFailed());\r\n            console.log('createProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const createProductSuccess = (data) => ({\r\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const createProductFailed = () => ({\r\n    type: actionTypes.CREATE_PRODUCT_FAILED\r\n})\r\n\r\nexport const deleteProductStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.DELETE_PRODUCT_START });\r\n            let res = await handleDeleteProductService(id);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Deleted successfully!');\r\n                dispatch(deleteProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(deleteProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(deleteProductFailed());\r\n            console.log('deleteProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const deleteProductSuccess = (data) => ({\r\n    type: actionTypes.DELETE_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const deleteProductFailed = () => ({\r\n    type: actionTypes.DELETE_PRODUCT_FAILED\r\n})\r\n\r\nexport const editProductStart = (product) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.EDIT_PRODUCT_START });\r\n            let res = await handleEditProductService(product);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Updated successfully!');\r\n                dispatch(editProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(editProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editProductFailed());\r\n            console.log('editProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const editProductSuccess = () => ({\r\n    type: actionTypes.EDIT_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const editProductFailed = () => ({\r\n    type: actionTypes.EDIT_PRODUCT_FAILED\r\n})\r\n\r\nexport const getReommendProductStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_RECOMMEND_PRODUCT_START });\r\n            let res = await handleGetRecommendProducts(id);\r\n            if (res && res.errCode === 0) {\r\n                if (res.data.length > 1) {\r\n                    dispatch(getReommendProductSuccess(res.data.reverse()));\r\n                } else {\r\n                    dispatch(getReommendProductSuccess(res.data));\r\n                }\r\n\r\n            } else {\r\n                dispatch(getReommendProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getReommendProductFailed());\r\n            console.log('getReommendProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getReommendProductSuccess = (data) => ({\r\n    type: actionTypes.GET_RECOMMEND_PRODUCT_SUCCESS,\r\n    recommendProduct: data\r\n})\r\nexport const getReommendProductFailed = () => ({\r\n    type: actionTypes.GET_RECOMMEND_PRODUCT_FAILED\r\n})\r\n\r\nexport const getSelfDesignStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_PRODUCT_BY_TYPE_START })\r\n            let res = await handleGetProductsByType(\"C3\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getSelfDesignSuccess(res.data.reverse()));\r\n            } else {\r\n                dispatch(getSelfDesignFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getSelfDesignFailed());\r\n            console.log('getSelfDesignFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getSelfDesignSuccess = (data) => ({\r\n    type: actionTypes.GET_PRODUCT_BY_TYPE_SUCCESS,\r\n    productsSelfDesign: data\r\n})\r\nexport const getSelfDesignFailed = () => ({\r\n    type: actionTypes.GET_PRODUCT_BY_TYPE_FAILED\r\n})","E:\\fullstack\\reactjs\\src\\store\\reducers\\productReducer.js",[],"E:\\fullstack\\reactjs\\src\\services\\ProductService.js",[],"E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Section\\Product.js",["332","333"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Product.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport * as actions from '../../../store/actions';\r\nimport { withRouter } from 'react-router';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nclass Product extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAllProduct();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.products !== this.props.products) {\r\n            this.setState({\r\n                products: this.props.products,\r\n            })\r\n        }\r\n    };\r\n\r\n    handleViewDetailProduct = (product) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/product-detail/${product.id}`)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { products } = this.state;\r\n        return (\r\n            <div className='section-share product-section'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'>Sản Phẩm</span>\r\n                        <button className='btn-section'>Xem tất cả</button>\r\n                    </div>\r\n                    <div className='section-content'>\r\n                        <div className='row'>\r\n                            {products && products.length > 0 &&\r\n                                products.map((item, index) => {\r\n                                    let imageBase64 = '';\r\n                                    if (item.image) {\r\n                                        imageBase64 = new Buffer(item.image, 'base64').toString('binary');\r\n                                    }\r\n                                    return (\r\n                                        <div\r\n                                            className='col-2'\r\n                                            onClick={() => this.handleViewDetailProduct(item)}\r\n                                        //hidden={item.categoryType === 'C3' ? true : false}\r\n                                        >\r\n                                            <div className='product'>\r\n                                                <div className='img-product' style={{ backgroundImage: `url(${imageBase64})` }}>\r\n                                                </div>\r\n                                                <div className='name-product'><span>{item.nameProduct}</span></div>\r\n                                                <div className='price'>\r\n                                                    <div className='price-product'>{item.price}đ</div>\r\n                                                    <div className='da-ban'>Đã bán: 90</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <div className='col-12'>\r\n                                {/* <ReactPaginate\r\n                                    breakLabel=\"...\"\r\n                                    nextLabel=\"next >>\"\r\n                                    onPageChange={this.handlePageClick()}\r\n                                    pageRangeDisplayed={5}\r\n                                    pageCount={this.state.totalPages}\r\n                                    previousLabel=\"<< previous\"\r\n                                    pageClassName='page-item'\r\n                                    pageLinkClassName='page-link'\r\n                                    previousClassName='page-item'\r\n                                    previousLinkClassName='page-link'\r\n                                    nextClassName='page-item'\r\n                                    nextLinkClassName='page-link'\r\n                                    breakClassName='page-item'\r\n                                    breakLinkClassName='page-link'\r\n                                    containerClassName='pagination'\r\n                                    activeClassName='active'\r\n                                /> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        products: state.product.products,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllProduct: () => dispatch(actions.getAllProductStart())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Product));\r\n","E:\\fullstack\\reactjs\\src\\containers\\System\\Posts\\PostsManage.js",["334"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { languages, crudActions, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport LightBox from 'react-image-lightbox';\r\nimport './PostsManage.scss';\r\nimport 'react-image-lightbox/style.css';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport TableManagePosts from './TableManagePosts';\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n\r\nclass ProductManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postsTypeArr: [],\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            typePosts: '',\r\n            title: '',\r\n            previewImageURL: '',\r\n            image: '',\r\n            isOpen: false,\r\n            action: '',\r\n            id: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getPostsType();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, spapshot) {\r\n        if (prevProps.typePosts !== this.props.typePosts) {\r\n            let postsTypeArr = this.props.typePosts;\r\n            this.setState({\r\n                postsTypeArr: postsTypeArr,\r\n                typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.allPosts !== this.props.allPosts) {\r\n            let postsTypeArr = this.props.typePosts;\r\n            this.setState({\r\n                title: '',\r\n                contentMarkdown: '',\r\n                previewImageURL: '',\r\n                image: '',\r\n                typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\r\n            })\r\n        }\r\n    };\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({ ...copyState });\r\n    };\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html\r\n        })\r\n    };\r\n\r\n    handleClearForm = () => {\r\n        let postsTypeArr = this.props.typePosts;\r\n        this.setState({\r\n            typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : '',\r\n            title: '',\r\n            contentMarkdown: '',\r\n            previewImageURL: '',\r\n            image: '',\r\n            action: ''\r\n        })\r\n    };\r\n\r\n    handleOnChangeImage = async (event) => {\r\n        let fileImage = event.target.files;\r\n        let file = fileImage[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            console.log('check base64 image: ', base64);\r\n            let imageObjectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: imageObjectUrl,\r\n                image: base64\r\n            })\r\n        }\r\n    };\r\n\r\n    isOpenImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    handleCreatePosts = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        this.props.createPosts({\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            contentHTML: this.state.contentHTML,\r\n            title: this.state.title,\r\n            typePosts: this.state.typePosts,\r\n            image: this.state.image,\r\n        })\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['title', 'previewImageURL', 'contentHTML', 'contentMarkdown'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    handleEditPostsParent = async (posts) => {\r\n        console.log('posts: ', posts);\r\n        let imageBase64 = '';\r\n        if (posts.imageLink) {\r\n            imageBase64 = new Buffer(posts.imageLink, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            id: posts.id,\r\n            contentMarkdown: posts.contentMarkdown,\r\n            contentHTML: posts.contentHTML,\r\n            previewImageURL: imageBase64,\r\n            image: '',\r\n            typePosts: posts.typePosts,\r\n            title: posts.title,\r\n            action: crudActions.EDIT\r\n        })\r\n    };\r\n\r\n    handleUpdatePosts = () => {\r\n        let { image } = this.state;\r\n        if (!image) {\r\n            this.props.editPosts({\r\n                id: this.state.id,\r\n                typePosts: this.state.typePosts,\r\n                title: this.state.title,\r\n                contentHTML: this.state.contentHTML,\r\n                contentMarkdown: this.state.contentMarkdown,\r\n            })\r\n        } else {\r\n            this.props.editPosts({\r\n                id: this.state.id,\r\n                typePosts: this.state.typePosts,\r\n                title: this.state.title,\r\n                contentHTML: this.state.contentHTML,\r\n                contentMarkdown: this.state.contentMarkdown,\r\n                image: this.state.image,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let { typePosts, title, postsTypeArr } = this.state;\r\n\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-12 title'>QUẢN LÝ BÀI VIẾT</div>\r\n                    <div className='col-12 my-3'>Tạo bài viết mới</div>\r\n                    <div className='col-2'>\r\n                        <label>Loại bài viết</label>\r\n                        <select\r\n                            className='form-control'\r\n                            value={typePosts}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'typePosts')}\r\n                        >\r\n                            {postsTypeArr && postsTypeArr.length > 0 &&\r\n                                postsTypeArr.map((item, index) => {\r\n                                    return (\r\n                                        <option key={index} value={item.keyMap}>{item.valueVi}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className='col-7'>\r\n                        <label>Tiêu đề bài viết</label>\r\n                        <input\r\n                            className='form-control'\r\n                            type='text'\r\n                            value={title}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'title')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-3'>\r\n                        <label>Hình ảnh</label>\r\n                        <div className='preview-img-container'>\r\n                            <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnChangeImage(event)} />\r\n                            <label className='label-upload' htmlFor=\"previewImg\">Tải ảnh <i className='fas fa-upload'></i></label>\r\n                            <div\r\n                                className='preview-image'\r\n                                style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                onClick={() => this.isOpenImage()}\r\n                            ></div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.isOpen === true &&\r\n                        <LightBox\r\n                            mainSrc={this.state.previewImageURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })}\r\n                        />\r\n                    }\r\n                    <div className='col-12'>\r\n                        <label>Nội dung bài viết</label>\r\n                        <MdEditor\r\n                            style={{ height: '500px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.contentMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 pt-3'>\r\n                        <button\r\n                            className='btn btn-primary'\r\n                            onClick={this.state.action === crudActions.EDIT ? () => this.handleUpdatePosts() : () => this.handleCreatePosts()}\r\n                        >\r\n                            {this.state.action === crudActions.EDIT ?\r\n                                <FormattedMessage id='manage-product.save' />\r\n                                :\r\n                                <FormattedMessage id='manage-product.create' />\r\n                            }\r\n                        </button>\r\n                        <button\r\n                            className='btn btn-secondary ml-3'\r\n                            onClick={this.handleClearForm}\r\n                        >\r\n                            Làm mới\r\n                        </button>\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <TableManagePosts\r\n                            handleEditPostsParent={this.handleEditPostsParent}\r\n                            action={this.state.action}\r\n                        ></TableManagePosts>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        typePosts: state.posts.types,\r\n        allPosts: state.posts.allPosts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getPostsType: () => dispatch(actions.getPostsTypeStart()),\r\n        createPosts: (postsInput) => dispatch(actions.createPostsStart(postsInput)),\r\n        editPosts: (postsInput) => dispatch(actions.editPostsStart(postsInput))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);\r\n","E:\\fullstack\\reactjs\\src\\store\\reducers\\postsReducer.js",[],"E:\\fullstack\\reactjs\\src\\store\\actions\\postsActions.js",["335"],"import actionTypes from './actionTypes';\r\nimport {\r\n    handleGetAllPosts,\r\n    handleGetAllCodeService,\r\n    handleCreatePostsService,\r\n    handleDeletePostsService,\r\n    handleEditPostsService,\r\n    handleGetDetailPost\r\n} from '../../services/PostsService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllPostsStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = [];\r\n            dispatch({ type: actionTypes.GET_ALL_POSTS_START })\r\n            if (!id) {\r\n                res = await handleGetAllPosts(\"ALL\");\r\n            } else {\r\n                res = await handleGetAllPosts(id);\r\n            }\r\n            if (res && res.errCode === 0) {\r\n                if (res.data.length > 1) {\r\n                    dispatch(getAllPostsSuccess(res.data.reverse()));\r\n                } else {\r\n                    dispatch(getAllPostsSuccess(res.data));\r\n                }\r\n\r\n            } else {\r\n                dispatch(getAllPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllPostsFailed());\r\n            console.log('getAllPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllPostsSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_POSTS_SUCCESS,\r\n    allPosts: data\r\n})\r\nexport const getAllPostsFailed = () => ({\r\n    type: actionTypes.GET_ALL_POSTS_FAILED\r\n})\r\n\r\nexport const getPostsTypeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_POSTS_TYPE_START })\r\n            let res = await handleGetAllCodeService('POSTSTYPE');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getPostsTypeSuccess(res.data));\r\n            } else {\r\n                dispatch(getPostsTypeFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getPostsTypeFailed());\r\n            console.log('getPostsTypeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getPostsTypeSuccess = (data) => ({\r\n    type: actionTypes.GET_POSTS_TYPE_SUCCESS,\r\n    types: data\r\n})\r\n\r\nexport const getPostsTypeFailed = () => ({\r\n    type: actionTypes.GET_POSTS_TYPE_FAILED\r\n})\r\n\r\nexport const createPostsStart = (postsInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.CREATE_POSTS_START })\r\n            let res = await handleCreatePostsService(postsInput);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Created successfully!');\r\n                dispatch(createPostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(createPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createPostsFailed());\r\n            console.log('createPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const createPostsSuccess = () => ({\r\n    type: actionTypes.CREATE_POSTS_SUCCESS,\r\n})\r\n\r\nexport const createPostsFailed = () => ({\r\n    type: actionTypes.CREATE_POSTS_FAILED\r\n})\r\n\r\nexport const deletePostsStart = (postsId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.DELETE_POSTS_START });\r\n            let res = await handleDeletePostsService(postsId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Deleted successfully!');\r\n                dispatch(deletePostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(deletePostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(deletePostsFailed());\r\n            console.log('deletePostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const deletePostsSuccess = () => ({\r\n    type: actionTypes.DELETE_POSTS_SUCCESS,\r\n})\r\n\r\nexport const deletePostsFailed = () => ({\r\n    type: actionTypes.DELETE_POSTS_FAILED\r\n})\r\n\r\nexport const editPostsStart = (posts) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.EDIT_POSTS_START });\r\n            let res = await handleEditPostsService(posts);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Updated successfully!');\r\n                dispatch(editPostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(editPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editPostsFailed());\r\n            console.log('editPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const editPostsSuccess = () => ({\r\n    type: actionTypes.EDIT_POSTS_SUCCESS,\r\n})\r\n\r\nexport const editPostsFailed = () => ({\r\n    type: actionTypes.EDIT_POSTS_FAILED\r\n})\r\n\r\nexport const getDetailPostsStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_DETAIL_POSTS_START })\r\n            let res = await handleGetDetailPost(id);\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getDetailPostsSuccess(res.data))\r\n            }\r\n        } catch (e) {\r\n            dispatch(getDetailPostsFailed());\r\n            console.log('getDetailPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getDetailPostsSuccess = (data) => ({\r\n    type: actionTypes.GET_DETAIL_POSTS_SUCCESS,\r\n    detailPosts: data\r\n})\r\nexport const getDetailPostsFailed = () => ({\r\n    type: actionTypes.GET_DETAIL_POSTS_FAILED\r\n})","E:\\fullstack\\reactjs\\src\\services\\PostsService.js",[],"E:\\fullstack\\reactjs\\src\\containers\\System\\Posts\\TableManagePosts.js",["336"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManagePosts.scss';\r\nimport * as actions from '../../../store/actions';\r\n\r\nclass TableManagePosts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allPosts: []\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getAllPosts();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allPosts !== this.props.allPosts) {\r\n            this.setState({ allPosts: this.props.allPosts })\r\n        }\r\n    };\r\n\r\n    handleDeletePosts = (posts) => {\r\n        this.props.deletePosts(posts.id);\r\n    }\r\n\r\n    handleEditPosts = (posts) => {\r\n        this.props.handleEditPostsParent(posts);\r\n    };\r\n\r\n    render() {\r\n        let { allPosts } = this.state;\r\n\r\n        return (\r\n            <div className='posts-container mx-0'>\r\n                <table id='TableManagePosts'>\r\n                    <tr>\r\n                        <th>Tiêu đề bài viết</th>\r\n                        <th>Loại</th>\r\n                        <th>Ngày tạo mới</th>\r\n                        <th>Ngày cập nhật</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    {allPosts && allPosts.length > 0 &&\r\n                        allPosts.map((item, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{item.title}</td>\r\n                                    <td>{item.typePosts}</td>\r\n                                    <td>{item.createAt}</td>\r\n                                    <td>{item.UpdateAt}</td>\r\n                                    <td>\r\n                                        <button\r\n                                            type='button'\r\n                                            className='btn-edit'\r\n                                            onClick={() => this.handleEditPosts(item)}\r\n                                        ><i className='fas fa-pencil-alt'></i></button>\r\n                                        <button\r\n                                            onClick={() => { this.handleDeletePosts(item) }}\r\n                                            type='button'\r\n                                            className='btn-delete'\r\n                                        ><i className='fas fa-trash'></i></button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </table>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allPosts: state.posts.allPosts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllPosts: () => dispatch(actions.getAllPostsStart()),\r\n        deletePosts: (id) => dispatch(actions.deletePostsStart(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManagePosts);\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\ProductDetail.js",[],"E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\ProductRecommend.js",[],"E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\PostsDetail.js",["337"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from '../HomeHeader';\r\nimport './PostsDetail.scss'\r\nimport HomeFooter from '../HomeFooter';\r\nimport * as actions from '../../../store/actions';\r\nimport PostsRecommend from './PostsRecommend';\r\nimport { withRouter, useHistory } from 'react-router';\r\n\r\nclass PostsDetail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            detailPosts: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            this.props.getDetailPosts(this.props.match.params.id);\r\n        }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.detailPosts !== this.props.detailPosts) {\r\n            this.setState({\r\n                detailPosts: this.props.detailPosts\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let { detailPosts } = this.state;\r\n        let imageBase64 = '';\r\n        if (detailPosts.imageLink) {\r\n            imageBase64 = new Buffer(detailPosts.imageLink, 'base64').toString('binary');\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <HomeHeader isShowBanner={false} />\r\n                <div className='posts-detail-container'>\r\n                    <div className='posts-name'>{detailPosts.title}</div>\r\n                    <div className='posts-image'>\r\n                        <div className='image'>\r\n                            <div className='img' style={{ backgroundImage: `url(${imageBase64})` }}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='post-content'>\r\n                        <div dangerouslySetInnerHTML={{ __html: detailPosts.contentHTML }}></div>\r\n                    </div>\r\n                </div>\r\n                <PostsRecommend id={this.props.match.params.id} />\r\n                <HomeFooter />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        detailPosts: state.posts.detailPosts,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getDetailPosts: (id) => dispatch(actions.getDetailPostsStart(id)),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostsDetail));\r\n","E:\\fullstack\\reactjs\\src\\containers\\HomePage\\Details\\PostsRecommend.js",[],{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","severity":1,"message":"343","line":11,"column":8,"nodeType":"344","messageId":"345","endLine":11,"endColumn":14},{"ruleId":"342","severity":1,"message":"346","line":13,"column":10,"nodeType":"344","messageId":"345","endLine":13,"endColumn":32},{"ruleId":"342","severity":1,"message":"347","line":52,"column":17,"nodeType":"344","messageId":"345","endLine":52,"endColumn":25},{"ruleId":"342","severity":1,"message":"348","line":52,"column":27,"nodeType":"344","messageId":"345","endLine":52,"endColumn":35},{"ruleId":"342","severity":1,"message":"349","line":54,"column":36,"nodeType":"344","messageId":"345","endLine":54,"endColumn":50},{"ruleId":"338","replacedBy":"350"},{"ruleId":"340","replacedBy":"351"},{"ruleId":"342","severity":1,"message":"352","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":18},{"ruleId":"338","replacedBy":"353"},{"ruleId":"340","replacedBy":"354"},{"ruleId":"355","severity":1,"message":"356","line":31,"column":1,"nodeType":"357","endLine":38,"endColumn":3},{"ruleId":"342","severity":1,"message":"358","line":2,"column":13,"nodeType":"344","messageId":"345","endLine":2,"endColumn":24},{"ruleId":"338","replacedBy":"359"},{"ruleId":"340","replacedBy":"360"},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"362","severity":1,"message":"363","line":6,"column":5,"nodeType":"364","messageId":"365","endLine":9,"endColumn":6},{"ruleId":"342","severity":1,"message":"366","line":2,"column":8,"nodeType":"344","messageId":"345","endLine":2,"endColumn":9},{"ruleId":"342","severity":1,"message":"367","line":12,"column":17,"nodeType":"344","messageId":"345","endLine":12,"endColumn":21},{"ruleId":"355","severity":1,"message":"368","line":1,"column":1,"nodeType":"357","endLine":13,"endColumn":3},{"ruleId":"338","replacedBy":"369"},{"ruleId":"340","replacedBy":"370"},{"ruleId":"342","severity":1,"message":"361","line":9,"column":10,"nodeType":"344","messageId":"345","endLine":9,"endColumn":26},{"ruleId":"342","severity":1,"message":"371","line":11,"column":10,"nodeType":"344","messageId":"345","endLine":11,"endColumn":20},{"ruleId":"342","severity":1,"message":"372","line":12,"column":10,"nodeType":"344","messageId":"345","endLine":12,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":5,"column":10,"nodeType":"344","messageId":"345","endLine":5,"endColumn":17},{"ruleId":"342","severity":1,"message":"361","line":5,"column":10,"nodeType":"344","messageId":"345","endLine":5,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":26},{"ruleId":"342","severity":1,"message":"374","line":193,"column":78,"nodeType":"344","messageId":"345","endLine":193,"endColumn":84},{"ruleId":"342","severity":1,"message":"375","line":3,"column":10,"nodeType":"344","messageId":"345","endLine":3,"endColumn":15},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"376","line":5,"column":10,"nodeType":"344","messageId":"345","endLine":5,"endColumn":19},{"ruleId":"342","severity":1,"message":"377","line":10,"column":8,"nodeType":"344","messageId":"345","endLine":10,"endColumn":14},{"ruleId":"342","severity":1,"message":"378","line":216,"column":15,"nodeType":"344","messageId":"345","endLine":216,"endColumn":30},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"375","line":11,"column":10,"nodeType":"344","messageId":"345","endLine":11,"endColumn":15},{"ruleId":"342","severity":1,"message":"361","line":4,"column":10,"nodeType":"344","messageId":"345","endLine":4,"endColumn":26},{"ruleId":"342","severity":1,"message":"379","line":7,"column":8,"nodeType":"344","messageId":"345","endLine":7,"endColumn":21},{"ruleId":"342","severity":1,"message":"376","line":4,"column":10,"nodeType":"344","messageId":"345","endLine":4,"endColumn":19},{"ruleId":"342","severity":1,"message":"375","line":10,"column":10,"nodeType":"344","messageId":"345","endLine":10,"endColumn":15},{"ruleId":"342","severity":1,"message":"361","line":2,"column":10,"nodeType":"344","messageId":"345","endLine":2,"endColumn":26},{"ruleId":"342","severity":1,"message":"371","line":8,"column":22,"nodeType":"344","messageId":"345","endLine":8,"endColumn":32},"no-native-reassign",["380"],"no-negated-in-lhs",["381"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'CustomToastCloseButton' is defined but never used.","'username' is assigned a value but never used.","'password' is assigned a value but never used.","'adminLoginFail' is assigned a value but never used.",["380"],["381"],"'Fragment' is defined but never used.",["380"],["381"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'queryString' is defined but never used.",["380"],["381"],"'FormattedMessage' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'_' is defined but never used.","'data' is assigned a value but never used.","Assign object to a variable before exporting as module default",["380"],["381"],"'useHistory' is defined but never used.","'userLoginSuccess' is defined but never used.","'emitter' is defined but never used.","'avatar' is assigned a value but never used.","'Toast' is defined but never used.","'languages' is defined but never used.","'Select' is defined but never used.","'selectedProduct' is assigned a value but never used.","'ReactPaginate' is defined but never used.","no-global-assign","no-unsafe-negation"]