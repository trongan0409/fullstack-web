{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { handleGetAllPosts, handleGetAllCodeService, handleCreatePostsService, handleDeletePostsService, handleEditPostsService } from '../../services/PostsService';\nimport { Toast, toast } from 'react-toastify';\nexport const getAllPostsStart = id => {\n  return async (dispatch, getState) => {\n    try {\n      let res = [];\n      dispatch({\n        type: actionTypes.GET_ALL_POSTS_START\n      });\n\n      if (!id) {\n        res = await handleGetAllPosts(\"ALL\");\n      } else {\n        res = await handleGetAllPosts(id);\n      }\n\n      if (res && res.errCode === 0) {\n        if (res.data.length > 1) {\n          dispatch(getAllPostsSuccess(res.data.reverse()));\n        } else {\n          dispatch(getAllPostsSuccess(res.data));\n        }\n      } else {\n        dispatch(getAllPostsFailed());\n      }\n    } catch (e) {\n      dispatch(getAllPostsFailed());\n      console.log('getAllPostsFailed err: ', e);\n    }\n  };\n};\nexport const getAllPostsSuccess = data => ({\n  type: actionTypes.GET_ALL_POSTS_SUCCESS,\n  allPosts: data\n});\nexport const getAllPostsFailed = () => ({\n  type: actionTypes.GET_ALL_POSTS_FAILED\n});\nexport const getPostsTypeStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_POSTS_TYPE_START\n      });\n      let res = await handleGetAllCodeService('POSTSTYPE');\n\n      if (res && res.errCode === 0) {\n        dispatch(getPostsTypeSuccess(res.data));\n      } else {\n        dispatch(getPostsTypeFailed());\n      }\n    } catch (e) {\n      dispatch(getPostsTypeFailed());\n      console.log('getPostsTypeFailed err: ', e);\n    }\n  };\n};\nexport const getPostsTypeSuccess = data => ({\n  type: actionTypes.GET_POSTS_TYPE_SUCCESS,\n  types: data\n});\nexport const getPostsTypeFailed = () => ({\n  type: actionTypes.GET_POSTS_TYPE_FAILED\n});\nexport const createPostsStart = postsInput => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.CREATE_POSTS_START\n      });\n      let res = await handleCreatePostsService(postsInput);\n\n      if (res && res.errCode === 0) {\n        toast.success('Created successfully!');\n        dispatch(createPostsSuccess());\n        dispatch(getAllPostsStart());\n      } else {\n        dispatch(createPostsFailed());\n      }\n    } catch (e) {\n      dispatch(createPostsFailed());\n      console.log('createPostsFailed err: ', e);\n    }\n  };\n};\nexport const createPostsSuccess = () => ({\n  type: actionTypes.CREATE_POSTS_SUCCESS\n});\nexport const createPostsFailed = () => ({\n  type: actionTypes.CREATE_POSTS_FAILED\n});\nexport const deletePostsStart = postsId => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.DELETE_POSTS_START\n      });\n      let res = await handleDeletePostsService(postsId);\n\n      if (res && res.errCode === 0) {\n        toast.success('Deleted successfully!');\n        dispatch(deletePostsSuccess());\n        dispatch(getAllPostsStart());\n      } else {\n        dispatch(deletePostsFailed());\n      }\n    } catch (e) {\n      dispatch(deletePostsFailed());\n      console.log('deletePostsFailed err: ', e);\n    }\n  };\n};\nexport const deletePostsSuccess = () => ({\n  type: actionTypes.DELETE_POSTS_SUCCESS\n});\nexport const deletePostsFailed = () => ({\n  type: actionTypes.DELETE_POSTS_FAILED\n});\nexport const editPostsStart = posts => {\n  return async (dispatch, getState) => {\n    console.log('check posts: ', posts);\n\n    try {\n      dispatch({\n        type: actionTypes.EDIT_POSTS_START\n      });\n      let res = await handleEditPostsService(posts);\n      console.log('check res: ', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Updated successfully!');\n        dispatch(editPostsSuccess());\n        dispatch(getAllPostsStart());\n      } else {\n        dispatch(editPostsFailed());\n      }\n    } catch (e) {\n      dispatch(editPostsFailed());\n      console.log('editPostsFailed err: ', e);\n    }\n  };\n};\nexport const editPostsSuccess = () => ({\n  type: actionTypes.EDIT_POSTS_SUCCESS\n});\nexport const editPostsFailed = () => ({\n  type: actionTypes.EDIT_POSTS_FAILED\n});","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/postsActions.js"],"names":["actionTypes","handleGetAllPosts","handleGetAllCodeService","handleCreatePostsService","handleDeletePostsService","handleEditPostsService","Toast","toast","getAllPostsStart","id","dispatch","getState","res","type","GET_ALL_POSTS_START","errCode","data","length","getAllPostsSuccess","reverse","getAllPostsFailed","e","console","log","GET_ALL_POSTS_SUCCESS","allPosts","GET_ALL_POSTS_FAILED","getPostsTypeStart","GET_POSTS_TYPE_START","getPostsTypeSuccess","getPostsTypeFailed","GET_POSTS_TYPE_SUCCESS","types","GET_POSTS_TYPE_FAILED","createPostsStart","postsInput","CREATE_POSTS_START","success","createPostsSuccess","createPostsFailed","CREATE_POSTS_SUCCESS","CREATE_POSTS_FAILED","deletePostsStart","postsId","DELETE_POSTS_START","deletePostsSuccess","deletePostsFailed","DELETE_POSTS_SUCCESS","DELETE_POSTS_FAILED","editPostsStart","posts","EDIT_POSTS_START","editPostsSuccess","editPostsFailed","EDIT_POSTS_SUCCESS","EDIT_POSTS_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { handleGetAllPosts, handleGetAllCodeService, handleCreatePostsService, handleDeletePostsService, handleEditPostsService } from '../../services/PostsService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllPostsStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = [];\r\n            dispatch({ type: actionTypes.GET_ALL_POSTS_START })\r\n            if (!id) {\r\n                res = await handleGetAllPosts(\"ALL\");\r\n            } else {\r\n                res = await handleGetAllPosts(id);\r\n            }\r\n            if (res && res.errCode === 0) {\r\n                if (res.data.length > 1) {\r\n                    dispatch(getAllPostsSuccess(res.data.reverse()));\r\n                } else {\r\n                    dispatch(getAllPostsSuccess(res.data));\r\n                }\r\n\r\n            } else {\r\n                dispatch(getAllPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllPostsFailed());\r\n            console.log('getAllPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllPostsSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_POSTS_SUCCESS,\r\n    allPosts: data\r\n})\r\nexport const getAllPostsFailed = () => ({\r\n    type: actionTypes.GET_ALL_POSTS_FAILED\r\n})\r\n\r\nexport const getPostsTypeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_POSTS_TYPE_START })\r\n            let res = await handleGetAllCodeService('POSTSTYPE');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getPostsTypeSuccess(res.data));\r\n            } else {\r\n                dispatch(getPostsTypeFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getPostsTypeFailed());\r\n            console.log('getPostsTypeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getPostsTypeSuccess = (data) => ({\r\n    type: actionTypes.GET_POSTS_TYPE_SUCCESS,\r\n    types: data\r\n})\r\n\r\nexport const getPostsTypeFailed = () => ({\r\n    type: actionTypes.GET_POSTS_TYPE_FAILED\r\n})\r\n\r\nexport const createPostsStart = (postsInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.CREATE_POSTS_START })\r\n            let res = await handleCreatePostsService(postsInput);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Created successfully!');\r\n                dispatch(createPostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(createPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createPostsFailed());\r\n            console.log('createPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const createPostsSuccess = () => ({\r\n    type: actionTypes.CREATE_POSTS_SUCCESS,\r\n})\r\n\r\nexport const createPostsFailed = () => ({\r\n    type: actionTypes.CREATE_POSTS_FAILED\r\n})\r\n\r\nexport const deletePostsStart = (postsId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.DELETE_POSTS_START });\r\n            let res = await handleDeletePostsService(postsId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Deleted successfully!');\r\n                dispatch(deletePostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(deletePostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(deletePostsFailed());\r\n            console.log('deletePostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const deletePostsSuccess = () => ({\r\n    type: actionTypes.DELETE_POSTS_SUCCESS,\r\n})\r\n\r\nexport const deletePostsFailed = () => ({\r\n    type: actionTypes.DELETE_POSTS_FAILED\r\n})\r\n\r\nexport const editPostsStart = (posts) => {\r\n    return async (dispatch, getState) => {\r\n        console.log('check posts: ', posts);\r\n        try {\r\n            dispatch({ type: actionTypes.EDIT_POSTS_START });\r\n            let res = await handleEditPostsService(posts);\r\n            console.log('check res: ', res);\r\n            if (res && res.errCode === 0) {\r\n                toast.success('Updated successfully!');\r\n                dispatch(editPostsSuccess());\r\n                dispatch(getAllPostsStart());\r\n            } else {\r\n                dispatch(editPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editPostsFailed());\r\n            console.log('editPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const editPostsSuccess = () => ({\r\n    type: actionTypes.EDIT_POSTS_SUCCESS,\r\n})\r\n\r\nexport const editPostsFailed = () => ({\r\n    type: actionTypes.EDIT_POSTS_FAILED\r\n})"]},"metadata":{},"sourceType":"module"}