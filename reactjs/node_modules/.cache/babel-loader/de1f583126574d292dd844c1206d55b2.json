{"ast":null,"code":"var _jsxFileName = \"E:\\\\fullstack\\\\reactjs\\\\src\\\\containers\\\\System\\\\Posts\\\\PostsManage.js\";\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { languages, crudActions, CommonUtils } from '../../../utils';\nimport * as actions from '../../../store/actions';\nimport LightBox from 'react-image-lightbox';\nimport './PostsManage.scss';\nimport 'react-image-lightbox/style.css';\nimport MarkdownIt from 'markdown-it';\nimport MdEditor from 'react-markdown-editor-lite';\nimport 'react-markdown-editor-lite/lib/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mdParser = new MarkdownIt();\n\nclass ProductManage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChangeInput = (event, id) => {\n      let copyState = { ...this.state\n      };\n      copyState[id] = event.target.value;\n      this.setState({ ...copyState\n      });\n    };\n\n    this.handleEditorChange = ({\n      html,\n      text\n    }) => {\n      this.setState({\n        contentMarkdown: text,\n        contentHTML: html\n      });\n    };\n\n    this.handleClearForm = () => {\n      this.setState({\n        typePosts: '',\n        title: '',\n        contentMarkdown: '',\n        previewImageURL: '',\n        image: ''\n      });\n    };\n\n    this.handleOnChangeImage = async event => {\n      let fileImage = event.target.files;\n      let file = fileImage[0];\n\n      if (file) {\n        let base64 = await CommonUtils.getBase64(file);\n        console.log('check base64 image: ', base64);\n        let imageObjectUrl = URL.createObjectURL(file);\n        this.setState({\n          previewImageURL: imageObjectUrl,\n          image: base64\n        });\n      }\n    };\n\n    this.isOpenImage = () => {\n      if (!this.state.previewImageURL) return;\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.handleCreatePosts = () => {\n      let isValid = this.checkValidateInput();\n      if (isValid === false) return;\n      this.props.createPosts({\n        contentMarkdown: this.state.contentMarkdown,\n        contentHTML: this.state.contentHTML,\n        title: this.state.title,\n        typePosts: this.state.typePosts,\n        image: this.state.image\n      });\n      console.log('check data input: ', this.state);\n    };\n\n    this.checkValidateInput = () => {\n      let isValid = true;\n      let arrCheck = ['title', 'previewImageURL', 'contentHTML', 'contentMarkdown'];\n\n      for (let i = 0; i < arrCheck.length; i++) {\n        if (!this.state[arrCheck[i]]) {\n          isValid = false;\n          alert('This input is required: ' + arrCheck[i]);\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.state = {\n      postsTypeArr: [],\n      contentMarkdown: '',\n      contentHTML: '',\n      typePosts: '',\n      title: '',\n      previewImageURL: '',\n      image: '',\n      isOpen: false\n    };\n  }\n\n  async componentDidMount() {\n    this.props.getPostsType();\n  }\n\n  componentDidUpdate(prevProps, prevState, spapshot) {\n    if (prevProps.typePosts !== this.props.typePosts) {\n      let postsTypeArr = this.props.typePosts;\n      this.setState({\n        postsTypeArr: postsTypeArr,\n        typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\n      });\n    }\n  }\n\n  render() {\n    let {\n      typePosts,\n      title,\n      postsTypeArr\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 title\",\n          children: \"POSTS MANAGEMENT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 my-3\",\n          children: \"Create Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: typePosts,\n            onChange: event => this.handleOnChangeInput(event, 'typePosts'),\n            children: postsTypeArr && postsTypeArr.length > 0 && postsTypeArr.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.keyMap,\n                children: item.valueVi\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-7\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"text\",\n            value: title,\n            onChange: event => this.handleOnChangeInput(event, 'title')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-img-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"previewImg\",\n              type: \"file\",\n              hidden: true,\n              onChange: event => this.handleOnChangeImage(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"label-upload\",\n              htmlFor: \"previewImg\",\n              children: [\"T\\u1EA3i \\u1EA3nh \", /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 90\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-image\",\n              style: {\n                backgroundImage: `url(${this.state.previewImageURL})`\n              },\n              onClick: () => this.isOpenImage()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), this.state.isOpen === true && /*#__PURE__*/_jsxDEV(LightBox, {\n          mainSrc: this.state.previewImageURL,\n          onCloseRequest: () => this.setState({\n            isOpen: false\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MdEditor, {\n            style: {\n              height: '500px'\n            },\n            renderHTML: text => mdParser.render(text),\n            onChange: this.handleEditorChange,\n            value: this.state.contentMarkdown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-4 pt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: () => this.handleCreatePosts(),\n            children: \"Create posts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary ml-3\",\n            onClick: this.handleClearForm,\n            children: \"Clear form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    typePosts: state.posts.types\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsType: () => dispatch(actions.getPostsTypeStart()),\n    createPosts: postsInput => dispatch(actions.createPostsStart(postsInput))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);","map":{"version":3,"sources":["E:/fullstack/reactjs/src/containers/System/Posts/PostsManage.js"],"names":["React","Component","FormattedMessage","connect","languages","crudActions","CommonUtils","actions","LightBox","MarkdownIt","MdEditor","mdParser","ProductManage","constructor","props","handleOnChangeInput","event","id","copyState","state","target","value","setState","handleEditorChange","html","text","contentMarkdown","contentHTML","handleClearForm","typePosts","title","previewImageURL","image","handleOnChangeImage","fileImage","files","file","base64","getBase64","console","log","imageObjectUrl","URL","createObjectURL","isOpenImage","isOpen","handleCreatePosts","isValid","checkValidateInput","createPosts","arrCheck","i","length","alert","postsTypeArr","componentDidMount","getPostsType","componentDidUpdate","prevProps","prevState","spapshot","keyMap","render","map","item","index","valueVi","backgroundImage","height","mapStateToProps","posts","types","mapDispatchToProps","dispatch","getPostsTypeStart","postsInput","createPostsStart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { languages, crudActions, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport LightBox from 'react-image-lightbox';\r\nimport './PostsManage.scss';\r\nimport 'react-image-lightbox/style.css';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n\r\nclass ProductManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postsTypeArr: [],\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            typePosts: '',\r\n            title: '',\r\n            previewImageURL: '',\r\n            image: '',\r\n            isOpen: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getPostsType();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, spapshot) {\r\n        if (prevProps.typePosts !== this.props.typePosts) {\r\n            let postsTypeArr = this.props.typePosts;\r\n            this.setState({\r\n                postsTypeArr: postsTypeArr,\r\n                typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\r\n            })\r\n        }\r\n    };\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({ ...copyState });\r\n    };\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html\r\n        })\r\n    };\r\n\r\n    handleClearForm = () => {\r\n        this.setState({\r\n            typePosts: '',\r\n            title: '',\r\n            contentMarkdown: '',\r\n            previewImageURL: '',\r\n            image: ''\r\n        })\r\n    };\r\n\r\n    handleOnChangeImage = async (event) => {\r\n        let fileImage = event.target.files;\r\n        let file = fileImage[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            console.log('check base64 image: ', base64);\r\n            let imageObjectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: imageObjectUrl,\r\n                image: base64\r\n            })\r\n        }\r\n    };\r\n\r\n    isOpenImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    handleCreatePosts = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        this.props.createPosts({\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            contentHTML: this.state.contentHTML,\r\n            title: this.state.title,\r\n            typePosts: this.state.typePosts,\r\n            image: this.state.image,\r\n        })\r\n        console.log('check data input: ', this.state);\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['title', 'previewImageURL', 'contentHTML', 'contentMarkdown'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        let { typePosts, title, postsTypeArr } = this.state;\r\n\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-12 title'>POSTS MANAGEMENT</div>\r\n                    <div className='col-12 my-3'>Create Posts</div>\r\n                    <div className='col-2'>\r\n                        <label>Posts type</label>\r\n                        <select\r\n                            className='form-control'\r\n                            value={typePosts}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'typePosts')}\r\n                        >\r\n                            {postsTypeArr && postsTypeArr.length > 0 &&\r\n                                postsTypeArr.map((item, index) => {\r\n                                    return (\r\n                                        <option key={index} value={item.keyMap}>{item.valueVi}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className='col-7'>\r\n                        <label>Posts title</label>\r\n                        <input\r\n                            className='form-control'\r\n                            type='text'\r\n                            value={title}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'title')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-3'>\r\n                        <label>Posts Image</label>\r\n                        <div className='preview-img-container'>\r\n                            <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnChangeImage(event)} />\r\n                            <label className='label-upload' htmlFor=\"previewImg\">Tải ảnh <i className='fas fa-upload'></i></label>\r\n                            <div\r\n                                className='preview-image'\r\n                                style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                onClick={() => this.isOpenImage()}\r\n                            ></div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.isOpen === true &&\r\n                        <LightBox\r\n                            mainSrc={this.state.previewImageURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })}\r\n                        />\r\n                    }\r\n                    <div className='col-12'>\r\n                        <label>Posts content</label>\r\n                        <MdEditor\r\n                            style={{ height: '500px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.contentMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 pt-3'>\r\n                        <button\r\n                            className='btn btn-primary'\r\n                            onClick={() => this.handleCreatePosts()}\r\n                        >Create posts</button>\r\n                        <button\r\n                            className='btn btn-secondary ml-3'\r\n                            onClick={this.handleClearForm}\r\n                        >\r\n                            Clear form\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        typePosts: state.posts.types\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getPostsType: () => dispatch(actions.getPostsTypeStart()),\r\n        createPosts: (postsInput) => dispatch(actions.createPostsStart(postsInput)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);\r\n"]},"metadata":{},"sourceType":"module"}