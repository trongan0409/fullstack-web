{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreatePostsService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\nimport { Toast, toast } from 'react-toastify'; // export const getAllProductStart = () => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\n//             let res = await handleGetAllProducts(\"ALL\");\n//             if (res && res.errCode === 0) {\n//                 dispatch(getAllProductSuccess(res.data.reverse()));\n//             } else {\n//                 dispatch(getAllProductFailed());\n//             }\n//         } catch (e) {\n//             dispatch(getAllProductFailed());\n//             console.log('getAllProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const getAllProductSuccess = (data) => ({\n//     type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\n//     products: data\n// })\n// export const getAllProductFailed = () => ({\n//     type: actionTypes.GET_ALL_PRODUCT_FAILED\n// })\n\nexport const getPostsTypeStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_POSTS_TYPE_START\n      });\n      let res = await handleGetAllCodeService('POSTSTYPE');\n\n      if (res && res.errCode === 0) {\n        dispatch(getPostsTypeSuccess(res.data));\n      } else {\n        dispatch(getPostsTypeFailed());\n      }\n    } catch (e) {\n      dispatch(getPostsTypeFailed());\n      console.log('getPostsTypeFailed err: ', e);\n    }\n  };\n};\nexport const getPostsTypeSuccess = data => ({\n  type: actionTypes.GET_POSTS_TYPE_SUCCESS,\n  types: data\n});\nexport const getPostsTypeFailed = () => ({\n  type: actionTypes.GET_POSTS_TYPE_FAILED\n}); // export const getStatusStart = () => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.GET_STATUS_START })\n//             let res = await handleGetAllCodeService('STATUS');\n//             console.log('check res: ', res);\n//             if (res && res.errCode === 0) {\n//                 dispatch(getStatusSuccess(res.data));\n//             } else {\n//                 dispatch(getStatusFailed());\n//             }\n//         } catch (e) {\n//             dispatch(getStatusFailed());\n//             console.log('getStatusFailed err: ', e);\n//         }\n//     }\n// }\n// export const getStatusSuccess = (data) => ({\n//     type: actionTypes.GET_STATUS_SUCCESS,\n//     statusProduct: data\n// })\n// export const getStatusFailed = () => ({\n//     type: actionTypes.GET_STATUS_FAILED\n// })\n\nexport const createPostsStart = dataInput => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.CREATE_POSTS_START\n      });\n      let res = await handleCreatePostsService(dataInput);\n      console.log('check res: ', res);\n\n      if (res && res.message.errCode === 0) {\n        dispatch(createPostsSuccess());\n      } else {\n        dispatch(createPostsFailed());\n      }\n    } catch (e) {\n      dispatch(createPostsFailed());\n      console.log('createPostsFailed err: ', e);\n    }\n  };\n};\nexport const createPostsSuccess = () => ({\n  type: actionTypes.CREATE_POSTS_SUCCESS\n});\nexport const createPostsFailed = () => ({\n  type: actionTypes.CREATE_POSTS_FAILED\n}); // export const deleteProductStart = (id) => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.DELETE_PRODUCT_START });\n//             let res = await handleDeleteProductService(id);\n//             if (res && res.errCode === 0) {\n//                 dispatch(deleteProductSuccess());\n//                 dispatch(getAllProductStart());\n//             } else {\n//                 dispatch(deleteProductFailed());\n//             }\n//         } catch (e) {\n//             //dispatch(deleteProductFailed());\n//             console.log('deleteProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const deleteProductSuccess = (data) => ({\n//     type: actionTypes.DELETE_PRODUCT_SUCCESS,\n// })\n// export const deleteProductFailed = () => ({\n//     type: actionTypes.DELETE_PRODUCT_FAILED\n// })\n// export const editProductStart = (product) => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.EDIT_PRODUCT_START });\n//             let res = await handleEditProductService(product);\n//             if (res && res.errCode === 0) {\n//                 dispatch(editProductSuccess());\n//                 dispatch(getAllProductStart());\n//             } else {\n//                 dispatch(editProductFailed());\n//             }\n//         } catch (e) {\n//             dispatch(editProductFailed());\n//             console.log('editProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const editProductSuccess = () => ({\n//     type: actionTypes.EDIT_PRODUCT_SUCCESS,\n// })\n// export const editProductFailed = () => ({\n//     type: actionTypes.EDIT_PRODUCT_FAILED\n// })","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/postsActions.js"],"names":["actionTypes","handleGetAllProducts","handleGetAllCodeService","handleCreatePostsService","handleDeleteProductService","handleEditProductService","Toast","toast","getPostsTypeStart","dispatch","getState","type","GET_POSTS_TYPE_START","res","errCode","getPostsTypeSuccess","data","getPostsTypeFailed","e","console","log","GET_POSTS_TYPE_SUCCESS","types","GET_POSTS_TYPE_FAILED","createPostsStart","dataInput","CREATE_POSTS_START","message","createPostsSuccess","createPostsFailed","CREATE_POSTS_SUCCESS","CREATE_POSTS_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreatePostsService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\n// export const getAllProductStart = () => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n//             let res = await handleGetAllProducts(\"ALL\");\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(getAllProductSuccess(res.data.reverse()));\r\n//             } else {\r\n//                 dispatch(getAllProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(getAllProductFailed());\r\n//             console.log('getAllProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const getAllProductSuccess = (data) => ({\r\n//     type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n//     products: data\r\n// })\r\n// export const getAllProductFailed = () => ({\r\n//     type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n// })\r\n\r\nexport const getPostsTypeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_POSTS_TYPE_START })\r\n            let res = await handleGetAllCodeService('POSTSTYPE');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getPostsTypeSuccess(res.data));\r\n            } else {\r\n                dispatch(getPostsTypeFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getPostsTypeFailed());\r\n            console.log('getPostsTypeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getPostsTypeSuccess = (data) => ({\r\n    type: actionTypes.GET_POSTS_TYPE_SUCCESS,\r\n    types: data\r\n})\r\n\r\nexport const getPostsTypeFailed = () => ({\r\n    type: actionTypes.GET_POSTS_TYPE_FAILED\r\n})\r\n\r\n// export const getStatusStart = () => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.GET_STATUS_START })\r\n//             let res = await handleGetAllCodeService('STATUS');\r\n//             console.log('check res: ', res);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(getStatusSuccess(res.data));\r\n//             } else {\r\n//                 dispatch(getStatusFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(getStatusFailed());\r\n//             console.log('getStatusFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const getStatusSuccess = (data) => ({\r\n//     type: actionTypes.GET_STATUS_SUCCESS,\r\n//     statusProduct: data\r\n// })\r\n// export const getStatusFailed = () => ({\r\n//     type: actionTypes.GET_STATUS_FAILED\r\n// })\r\n\r\nexport const createPostsStart = (dataInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.CREATE_POSTS_START })\r\n            let res = await handleCreatePostsService(dataInput);\r\n            console.log('check res: ', res);\r\n            if (res && res.message.errCode === 0) {\r\n                dispatch(createPostsSuccess());\r\n            } else {\r\n                dispatch(createPostsFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createPostsFailed());\r\n            console.log('createPostsFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const createPostsSuccess = () => ({\r\n    type: actionTypes.CREATE_POSTS_SUCCESS,\r\n})\r\n\r\nexport const createPostsFailed = () => ({\r\n    type: actionTypes.CREATE_POSTS_FAILED\r\n})\r\n\r\n// export const deleteProductStart = (id) => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.DELETE_PRODUCT_START });\r\n//             let res = await handleDeleteProductService(id);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(deleteProductSuccess());\r\n//                 dispatch(getAllProductStart());\r\n//             } else {\r\n//                 dispatch(deleteProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             //dispatch(deleteProductFailed());\r\n//             console.log('deleteProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const deleteProductSuccess = (data) => ({\r\n//     type: actionTypes.DELETE_PRODUCT_SUCCESS,\r\n// })\r\n\r\n// export const deleteProductFailed = () => ({\r\n//     type: actionTypes.DELETE_PRODUCT_FAILED\r\n// })\r\n\r\n// export const editProductStart = (product) => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.EDIT_PRODUCT_START });\r\n//             let res = await handleEditProductService(product);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(editProductSuccess());\r\n//                 dispatch(getAllProductStart());\r\n//             } else {\r\n//                 dispatch(editProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(editProductFailed());\r\n//             console.log('editProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const editProductSuccess = () => ({\r\n//     type: actionTypes.EDIT_PRODUCT_SUCCESS,\r\n// })\r\n\r\n// export const editProductFailed = () => ({\r\n//     type: actionTypes.EDIT_PRODUCT_FAILED\r\n// })"]},"metadata":{},"sourceType":"module"}