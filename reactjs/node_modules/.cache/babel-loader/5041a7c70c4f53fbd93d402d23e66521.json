{"ast":null,"code":"var _jsxFileName = \"E:\\\\fullstack\\\\reactjs\\\\src\\\\containers\\\\System\\\\Posts\\\\PostsManage.js\";\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { languages, crudActions, CommonUtils } from '../../../utils';\nimport * as actions from '../../../store/actions';\nimport LightBox from 'react-image-lightbox';\nimport './PostsManage.scss';\nimport 'react-image-lightbox/style.css';\nimport MarkdownIt from 'markdown-it';\nimport MdEditor from 'react-markdown-editor-lite';\nimport 'react-markdown-editor-lite/lib/index.css';\nimport TableManagePosts from './TableManagePosts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mdParser = new MarkdownIt();\n\nclass ProductManage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChangeInput = (event, id) => {\n      let copyState = { ...this.state\n      };\n      copyState[id] = event.target.value;\n      this.setState({ ...copyState\n      });\n    };\n\n    this.handleEditorChange = ({\n      html,\n      text\n    }) => {\n      this.setState({\n        contentMarkdown: text,\n        contentHTML: html\n      });\n    };\n\n    this.handleClearForm = () => {\n      let postsTypeArr = this.props.typePosts;\n      this.setState({\n        typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : '',\n        title: '',\n        contentMarkdown: '',\n        previewImageURL: '',\n        image: '',\n        action: ''\n      });\n    };\n\n    this.handleOnChangeImage = async event => {\n      let fileImage = event.target.files;\n      let file = fileImage[0];\n\n      if (file) {\n        let base64 = await CommonUtils.getBase64(file);\n        console.log('check base64 image: ', base64);\n        let imageObjectUrl = URL.createObjectURL(file);\n        this.setState({\n          previewImageURL: imageObjectUrl,\n          image: base64\n        });\n      }\n    };\n\n    this.isOpenImage = () => {\n      if (!this.state.previewImageURL) return;\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.handleCreatePosts = () => {\n      let isValid = this.checkValidateInput();\n      if (isValid === false) return;\n      this.props.createPosts({\n        contentMarkdown: this.state.contentMarkdown,\n        contentHTML: this.state.contentHTML,\n        title: this.state.title,\n        typePosts: this.state.typePosts,\n        image: this.state.image\n      });\n    };\n\n    this.checkValidateInput = () => {\n      let isValid = true;\n      let arrCheck = ['title', 'previewImageURL', 'contentHTML', 'contentMarkdown'];\n\n      for (let i = 0; i < arrCheck.length; i++) {\n        if (!this.state[arrCheck[i]]) {\n          isValid = false;\n          alert('This input is required: ' + arrCheck[i]);\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.handleEditPostsParent = posts => {\n      console.log('posts: ', posts);\n      let imageBase64 = '';\n\n      if (posts.imageLink) {\n        imageBase64 = new Buffer(posts.imageLink, 'base64').toString('binary');\n      }\n\n      this.setState({\n        contentMarkdown: posts.contentMarkdown,\n        previewImageURL: imageBase64,\n        image: '',\n        typePosts: posts.typePosts,\n        title: posts.title,\n        action: crudActions.EDIT\n      });\n    };\n\n    this.handleUpdatePosts = () => {\n      this.props.editPosts({\n        typePosts: this.state.typePosts,\n        title: this.state.title,\n        contentHTML: this.state.contentHTML,\n        contentMarkdown: this.state.contentMarkdown,\n        image: this.state.image\n      });\n    };\n\n    this.state = {\n      postsTypeArr: [],\n      contentMarkdown: '',\n      contentHTML: '',\n      typePosts: '',\n      title: '',\n      previewImageURL: '',\n      image: '',\n      isOpen: false,\n      action: ''\n    };\n  }\n\n  async componentDidMount() {\n    this.props.getPostsType();\n  }\n\n  componentDidUpdate(prevProps, prevState, spapshot) {\n    if (prevProps.typePosts !== this.props.typePosts) {\n      let postsTypeArr = this.props.typePosts;\n      this.setState({\n        postsTypeArr: postsTypeArr,\n        typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\n      });\n    }\n\n    if (prevProps.allPosts !== this.props.allPosts) {\n      let postsTypeArr = this.props.typePosts;\n      this.setState({\n        title: '',\n        contentMarkdown: '',\n        previewImageURL: '',\n        image: '',\n        typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\n      });\n    }\n  }\n\n  render() {\n    let {\n      typePosts,\n      title,\n      postsTypeArr\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 title\",\n          children: \"POSTS MANAGEMENT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 my-3\",\n          children: \"Create Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: typePosts,\n            onChange: event => this.handleOnChangeInput(event, 'typePosts'),\n            children: postsTypeArr && postsTypeArr.length > 0 && postsTypeArr.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: item.keyMap,\n                children: item.valueVi\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-7\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"text\",\n            value: title,\n            onChange: event => this.handleOnChangeInput(event, 'title')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-img-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"previewImg\",\n              type: \"file\",\n              hidden: true,\n              onChange: event => this.handleOnChangeImage(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"label-upload\",\n              htmlFor: \"previewImg\",\n              children: [\"T\\u1EA3i \\u1EA3nh \", /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 90\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-image\",\n              style: {\n                backgroundImage: `url(${this.state.previewImageURL})`\n              },\n              onClick: () => this.isOpenImage()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), this.state.isOpen === true && /*#__PURE__*/_jsxDEV(LightBox, {\n          mainSrc: this.state.previewImageURL,\n          onCloseRequest: () => this.setState({\n            isOpen: false\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Posts content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MdEditor, {\n            style: {\n              height: '500px'\n            },\n            renderHTML: text => mdParser.render(text),\n            onChange: this.handleEditorChange,\n            value: this.state.contentMarkdown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-4 pt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: this.state.action === crudActions.EDIT ? () => this.handleUpdatePosts() : () => this.handleCreatePosts(),\n            children: this.state.action === crudActions.EDIT ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"manage-product.save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"manage-product.create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary ml-3\",\n            onClick: this.handleClearForm,\n            children: \"Clear form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(TableManagePosts, {\n            handleEditPostsParent: this.handleEditPostsParent,\n            action: this.state.action\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    typePosts: state.posts.types,\n    allPosts: state.posts.allPosts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsType: () => dispatch(actions.getPostsTypeStart()),\n    createPosts: postsInput => dispatch(actions.createPostsStart(postsInput)),\n    editPosts: postsInput => dispatch(actions.editPostsStart(postsInput))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);","map":{"version":3,"sources":["E:/fullstack/reactjs/src/containers/System/Posts/PostsManage.js"],"names":["React","Component","FormattedMessage","connect","languages","crudActions","CommonUtils","actions","LightBox","MarkdownIt","MdEditor","TableManagePosts","mdParser","ProductManage","constructor","props","handleOnChangeInput","event","id","copyState","state","target","value","setState","handleEditorChange","html","text","contentMarkdown","contentHTML","handleClearForm","postsTypeArr","typePosts","length","keyMap","title","previewImageURL","image","action","handleOnChangeImage","fileImage","files","file","base64","getBase64","console","log","imageObjectUrl","URL","createObjectURL","isOpenImage","isOpen","handleCreatePosts","isValid","checkValidateInput","createPosts","arrCheck","i","alert","handleEditPostsParent","posts","imageBase64","imageLink","Buffer","toString","EDIT","handleUpdatePosts","editPosts","componentDidMount","getPostsType","componentDidUpdate","prevProps","prevState","spapshot","allPosts","render","map","item","index","valueVi","backgroundImage","height","mapStateToProps","types","mapDispatchToProps","dispatch","getPostsTypeStart","postsInput","createPostsStart","editPostsStart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { languages, crudActions, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport LightBox from 'react-image-lightbox';\r\nimport './PostsManage.scss';\r\nimport 'react-image-lightbox/style.css';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport TableManagePosts from './TableManagePosts';\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n\r\nclass ProductManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postsTypeArr: [],\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            typePosts: '',\r\n            title: '',\r\n            previewImageURL: '',\r\n            image: '',\r\n            isOpen: false,\r\n            action: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getPostsType();\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, spapshot) {\r\n        if (prevProps.typePosts !== this.props.typePosts) {\r\n            let postsTypeArr = this.props.typePosts;\r\n            this.setState({\r\n                postsTypeArr: postsTypeArr,\r\n                typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.allPosts !== this.props.allPosts) {\r\n            let postsTypeArr = this.props.typePosts;\r\n            this.setState({\r\n                title: '',\r\n                contentMarkdown: '',\r\n                previewImageURL: '',\r\n                image: '',\r\n                typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : ''\r\n            })\r\n        }\r\n    };\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({ ...copyState });\r\n    };\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html\r\n        })\r\n    };\r\n\r\n    handleClearForm = () => {\r\n        let postsTypeArr = this.props.typePosts;\r\n        this.setState({\r\n            typePosts: postsTypeArr && postsTypeArr.length > 0 ? postsTypeArr[0].keyMap : '',\r\n            title: '',\r\n            contentMarkdown: '',\r\n            previewImageURL: '',\r\n            image: '',\r\n            action: ''\r\n        })\r\n    };\r\n\r\n    handleOnChangeImage = async (event) => {\r\n        let fileImage = event.target.files;\r\n        let file = fileImage[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            console.log('check base64 image: ', base64);\r\n            let imageObjectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: imageObjectUrl,\r\n                image: base64\r\n            })\r\n        }\r\n    };\r\n\r\n    isOpenImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    handleCreatePosts = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        this.props.createPosts({\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            contentHTML: this.state.contentHTML,\r\n            title: this.state.title,\r\n            typePosts: this.state.typePosts,\r\n            image: this.state.image,\r\n        })\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['title', 'previewImageURL', 'contentHTML', 'contentMarkdown'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    handleEditPostsParent = (posts) => {\r\n        console.log('posts: ', posts);\r\n        let imageBase64 = '';\r\n        if (posts.imageLink) {\r\n            imageBase64 = new Buffer(posts.imageLink, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            contentMarkdown: posts.contentMarkdown,\r\n            previewImageURL: imageBase64,\r\n            image: '',\r\n            typePosts: posts.typePosts,\r\n            title: posts.title,\r\n            action: crudActions.EDIT\r\n        })\r\n    };\r\n\r\n    handleUpdatePosts = () => {\r\n        this.props.editPosts({\r\n            typePosts: this.state.typePosts,\r\n            title: this.state.title,\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            image: this.state.image,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let { typePosts, title, postsTypeArr } = this.state;\r\n\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-12 title'>POSTS MANAGEMENT</div>\r\n                    <div className='col-12 my-3'>Create Posts</div>\r\n                    <div className='col-2'>\r\n                        <label>Posts type</label>\r\n                        <select\r\n                            className='form-control'\r\n                            value={typePosts}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'typePosts')}\r\n                        >\r\n                            {postsTypeArr && postsTypeArr.length > 0 &&\r\n                                postsTypeArr.map((item, index) => {\r\n                                    return (\r\n                                        <option key={index} value={item.keyMap}>{item.valueVi}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className='col-7'>\r\n                        <label>Posts title</label>\r\n                        <input\r\n                            className='form-control'\r\n                            type='text'\r\n                            value={title}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'title')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-3'>\r\n                        <label>Posts Image</label>\r\n                        <div className='preview-img-container'>\r\n                            <input id='previewImg' type='file' hidden onChange={(event) => this.handleOnChangeImage(event)} />\r\n                            <label className='label-upload' htmlFor=\"previewImg\">Tải ảnh <i className='fas fa-upload'></i></label>\r\n                            <div\r\n                                className='preview-image'\r\n                                style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                onClick={() => this.isOpenImage()}\r\n                            ></div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.isOpen === true &&\r\n                        <LightBox\r\n                            mainSrc={this.state.previewImageURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })}\r\n                        />\r\n                    }\r\n                    <div className='col-12'>\r\n                        <label>Posts content</label>\r\n                        <MdEditor\r\n                            style={{ height: '500px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.contentMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 pt-3'>\r\n                        <button\r\n                            className='btn btn-primary'\r\n                            onClick={this.state.action === crudActions.EDIT ? () => this.handleUpdatePosts() : () => this.handleCreatePosts()}\r\n                        >\r\n                            {this.state.action === crudActions.EDIT ?\r\n                                <FormattedMessage id='manage-product.save' />\r\n                                :\r\n                                <FormattedMessage id='manage-product.create' />\r\n                            }\r\n                        </button>\r\n                        <button\r\n                            className='btn btn-secondary ml-3'\r\n                            onClick={this.handleClearForm}\r\n                        >\r\n                            Clear form\r\n                        </button>\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <TableManagePosts\r\n                            handleEditPostsParent={this.handleEditPostsParent}\r\n                            action={this.state.action}\r\n                        ></TableManagePosts>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        typePosts: state.posts.types,\r\n        allPosts: state.posts.allPosts\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getPostsType: () => dispatch(actions.getPostsTypeStart()),\r\n        createPosts: (postsInput) => dispatch(actions.createPostsStart(postsInput)),\r\n        editPosts: (postsInput) => dispatch(actions.editPostsStart(postsInput))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductManage);\r\n"]},"metadata":{},"sourceType":"module"}