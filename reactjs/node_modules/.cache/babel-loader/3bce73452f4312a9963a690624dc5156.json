{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreateProductService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\nimport { Toast, toast } from 'react-toastify';\nexport const getAllProductStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_ALL_PRODUCT_START\n      });\n      let res = await handleGetAllProducts(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(getAllProductSuccess(res.data.reverse()));\n      } else {\n        dispatch(getAllProductFailed());\n      }\n    } catch (e) {\n      dispatch(getAllProductFailed());\n      console.log('getAllProductFailed err: ', e);\n    }\n  };\n};\nexport const getAllProductSuccess = data => ({\n  type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\n  products: data\n});\nexport const getAllProductFailed = () => ({\n  type: actionTypes.GET_ALL_PRODUCT_FAILED\n});\nexport const getTypeStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_TYPE_START\n      });\n      let res = await handleGetAllCodeService('CATEGORY');\n\n      if (res && res.errCode === 0) {\n        dispatch(getTypeSuccess(res.data));\n      } else {\n        dispatch(getTypeFailed());\n      }\n    } catch (e) {\n      dispatch(getTypeFailed());\n      console.log('getTypeFailed err: ', e);\n    }\n  };\n};\nexport const getTypeSuccess = data => ({\n  type: actionTypes.GET_TYPE_SUCCESS,\n  types: data\n});\nexport const getTypeFailed = () => ({\n  type: actionTypes.GET_TYPE_FAILED\n});\nexport const getStatusStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_STATUS_START\n      });\n      let res = await handleGetAllCodeService('STATUS');\n      console.log('check res: ', res);\n\n      if (res && res.errCode === 0) {\n        dispatch(getStatusSuccess(res.data));\n      } else {\n        dispatch(getStatusFailed());\n      }\n    } catch (e) {\n      dispatch(getStatusFailed());\n      console.log('getStatusFailed err: ', e);\n    }\n  };\n};\nexport const getStatusSuccess = data => ({\n  type: actionTypes.GET_STATUS_SUCCESS,\n  statusProduct: data\n});\nexport const getStatusFailed = () => ({\n  type: actionTypes.GET_STATUS_FAILED\n});\nexport const createProductStart = dataInput => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.CREATE_PRODUCT_START\n      });\n      let res = await handleCreateProductService(dataInput);\n      console.log('check res: ', res);\n\n      if (res && res.message.errCode === 0) {\n        dispatch(createProductSuccess());\n        dispatch(getAllProductStart());\n      } else {\n        dispatch(createProductFailed());\n      }\n    } catch (e) {\n      dispatch(createProductFailed());\n      console.log('createProductFailed err: ', e);\n    }\n  };\n};\nexport const createProductSuccess = data => ({\n  type: actionTypes.CREATE_PRODUCT_SUCCESS\n});\nexport const createProductFailed = () => ({\n  type: actionTypes.CREATE_PRODUCT_FAILED\n});\nexport const deleteProductStart = id => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.DELETE_PRODUCT_START\n      });\n      let res = await handleDeleteProductService(id);\n\n      if (res && res.errCode === 0) {\n        dispatch(deleteProductSuccess());\n        dispatch(getAllProductStart());\n      } else {\n        dispatch(deleteProductFailed());\n      }\n    } catch (e) {\n      //dispatch(deleteProductFailed());\n      console.log('deleteProductFailed err: ', e);\n    }\n  };\n};\nexport const deleteProductSuccess = data => ({\n  type: actionTypes.DELETE_PRODUCT_SUCCESS\n});\nexport const deleteProductFailed = () => ({\n  type: actionTypes.DELETE_PRODUCT_FAILED\n});\nexport const editProductStart = product => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.EDIT_PRODUCT_START\n      });\n      let res = await handleEditProductService(product);\n\n      if (res && res.errCode === 0) {\n        dispatch(editProductSuccess());\n        dispatch(getAllProductStart());\n      } else {\n        dispatch(editProductFailed());\n      }\n    } catch (e) {\n      dispatch(editProductFailed());\n      console.log('editProductFailed err: ', e);\n    }\n  };\n};\nexport const editProductSuccess = () => ({\n  type: actionTypes.EDIT_PRODUCT_SUCCESS\n});\nexport const editProductFailed = () => ({\n  type: actionTypes.EDIT_PRODUCT_FAILED\n});","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/productActions.js"],"names":["actionTypes","handleGetAllProducts","handleGetAllCodeService","handleCreateProductService","handleDeleteProductService","handleEditProductService","Toast","toast","getAllProductStart","dispatch","getState","type","GET_ALL_PRODUCT_START","res","errCode","getAllProductSuccess","data","reverse","getAllProductFailed","e","console","log","GET_ALL_PRODUCT_SUCCESS","products","GET_ALL_PRODUCT_FAILED","getTypeStart","GET_TYPE_START","getTypeSuccess","getTypeFailed","GET_TYPE_SUCCESS","types","GET_TYPE_FAILED","getStatusStart","GET_STATUS_START","getStatusSuccess","getStatusFailed","GET_STATUS_SUCCESS","statusProduct","GET_STATUS_FAILED","createProductStart","dataInput","CREATE_PRODUCT_START","message","createProductSuccess","createProductFailed","CREATE_PRODUCT_SUCCESS","CREATE_PRODUCT_FAILED","deleteProductStart","id","DELETE_PRODUCT_START","deleteProductSuccess","deleteProductFailed","DELETE_PRODUCT_SUCCESS","DELETE_PRODUCT_FAILED","editProductStart","product","EDIT_PRODUCT_START","editProductSuccess","editProductFailed","EDIT_PRODUCT_SUCCESS","EDIT_PRODUCT_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreateProductService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllProductStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n            let res = await handleGetAllProducts(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getAllProductSuccess(res.data.reverse()));\r\n            } else {\r\n                dispatch(getAllProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllProductFailed());\r\n            console.log('getAllProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllProductSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n    products: data\r\n})\r\nexport const getAllProductFailed = () => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n})\r\n\r\nexport const getTypeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_TYPE_START })\r\n            let res = await handleGetAllCodeService('CATEGORY');\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getTypeSuccess(res.data));\r\n            } else {\r\n                dispatch(getTypeFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getTypeFailed());\r\n            console.log('getTypeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getTypeSuccess = (data) => ({\r\n    type: actionTypes.GET_TYPE_SUCCESS,\r\n    types: data\r\n})\r\n\r\nexport const getTypeFailed = () => ({\r\n    type: actionTypes.GET_TYPE_FAILED\r\n})\r\n\r\nexport const getStatusStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_STATUS_START })\r\n            let res = await handleGetAllCodeService('STATUS');\r\n            console.log('check res: ', res);\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getStatusSuccess(res.data));\r\n            } else {\r\n                dispatch(getStatusFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getStatusFailed());\r\n            console.log('getStatusFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getStatusSuccess = (data) => ({\r\n    type: actionTypes.GET_STATUS_SUCCESS,\r\n    statusProduct: data\r\n})\r\nexport const getStatusFailed = () => ({\r\n    type: actionTypes.GET_STATUS_FAILED\r\n})\r\n\r\nexport const createProductStart = (dataInput) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.CREATE_PRODUCT_START })\r\n            let res = await handleCreateProductService(dataInput);\r\n            console.log('check res: ', res);\r\n            if (res && res.message.errCode === 0) {\r\n                dispatch(createProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(createProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(createProductFailed());\r\n            console.log('createProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const createProductSuccess = (data) => ({\r\n    type: actionTypes.CREATE_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const createProductFailed = () => ({\r\n    type: actionTypes.CREATE_PRODUCT_FAILED\r\n})\r\n\r\nexport const deleteProductStart = (id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.DELETE_PRODUCT_START });\r\n            let res = await handleDeleteProductService(id);\r\n            if (res && res.errCode === 0) {\r\n                dispatch(deleteProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(deleteProductFailed());\r\n            }\r\n        } catch (e) {\r\n            //dispatch(deleteProductFailed());\r\n            console.log('deleteProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const deleteProductSuccess = (data) => ({\r\n    type: actionTypes.DELETE_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const deleteProductFailed = () => ({\r\n    type: actionTypes.DELETE_PRODUCT_FAILED\r\n})\r\n\r\nexport const editProductStart = (product) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.EDIT_PRODUCT_START });\r\n            let res = await handleEditProductService(product);\r\n            if (res && res.errCode === 0) {\r\n                dispatch(editProductSuccess());\r\n                dispatch(getAllProductStart());\r\n            } else {\r\n                dispatch(editProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editProductFailed());\r\n            console.log('editProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const editProductSuccess = () => ({\r\n    type: actionTypes.EDIT_PRODUCT_SUCCESS,\r\n})\r\n\r\nexport const editProductFailed = () => ({\r\n    type: actionTypes.EDIT_PRODUCT_FAILED\r\n})"]},"metadata":{},"sourceType":"module"}