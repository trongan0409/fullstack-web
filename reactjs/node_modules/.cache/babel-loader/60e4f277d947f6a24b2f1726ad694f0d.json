{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreateProductService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\nimport { Toast, toast } from 'react-toastify';\nexport const getAllProductStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_ALL_PRODUCT_START\n      });\n      let res = await handleGetAllProducts(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(getAllProductSuccess(res.data.reverse()));\n      } else {\n        dispatch(getAllProductFailed());\n      }\n    } catch (e) {\n      dispatch(getAllProductFailed());\n      console.log('getAllProductFailed err: ', e);\n    }\n  };\n};\nexport const getAllProductSuccess = data => ({\n  type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\n  products: data\n});\nexport const getAllProductFailed = () => ({\n  type: actionTypes.GET_ALL_PRODUCT_FAILED\n}); // export const getTypeStart = () => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.GET_TYPE_START })\n//             let res = await handleGetAllCodeService('CATEGORY');\n//             if (res && res.errCode === 0) {\n//                 dispatch(getTypeSuccess(res.data));\n//             } else {\n//                 dispatch(getTypeFailed());\n//             }\n//         } catch (e) {\n//             dispatch(getTypeFailed());\n//             console.log('getTypeFailed err: ', e);\n//         }\n//     }\n// }\n// export const getTypeSuccess = (data) => ({\n//     type: actionTypes.GET_TYPE_SUCCESS,\n//     types: data\n// })\n// export const getTypeFailed = () => ({\n//     type: actionTypes.GET_TYPE_FAILED\n// })\n// export const getStatusStart = () => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.GET_STATUS_START })\n//             let res = await handleGetAllCodeService('STATUS');\n//             console.log('check res: ', res);\n//             if (res && res.errCode === 0) {\n//                 dispatch(getStatusSuccess(res.data));\n//             } else {\n//                 dispatch(getStatusFailed());\n//             }\n//         } catch (e) {\n//             dispatch(getStatusFailed());\n//             console.log('getStatusFailed err: ', e);\n//         }\n//     }\n// }\n// export const getStatusSuccess = (data) => ({\n//     type: actionTypes.GET_STATUS_SUCCESS,\n//     statusProduct: data\n// })\n// export const getStatusFailed = () => ({\n//     type: actionTypes.GET_STATUS_FAILED\n// })\n// export const createProductStart = (dataInput) => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.CREATE_PRODUCT_START })\n//             let res = await handleCreateProductService(dataInput);\n//             console.log('check res: ', res);\n//             if (res && res.message.errCode === 0) {\n//                 dispatch(createProductSuccess());\n//                 dispatch(getAllProductStart());\n//             } else {\n//                 dispatch(createProductFailed());\n//             }\n//         } catch (e) {\n//             dispatch(createProductFailed());\n//             console.log('createProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const createProductSuccess = (data) => ({\n//     type: actionTypes.CREATE_PRODUCT_SUCCESS,\n// })\n// export const createProductFailed = () => ({\n//     type: actionTypes.CREATE_PRODUCT_FAILED\n// })\n// export const deleteProductStart = (id) => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.DELETE_PRODUCT_START });\n//             let res = await handleDeleteProductService(id);\n//             if (res && res.errCode === 0) {\n//                 dispatch(deleteProductSuccess());\n//                 dispatch(getAllProductStart());\n//             } else {\n//                 dispatch(deleteProductFailed());\n//             }\n//         } catch (e) {\n//             //dispatch(deleteProductFailed());\n//             console.log('deleteProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const deleteProductSuccess = (data) => ({\n//     type: actionTypes.DELETE_PRODUCT_SUCCESS,\n// })\n// export const deleteProductFailed = () => ({\n//     type: actionTypes.DELETE_PRODUCT_FAILED\n// })\n// export const editProductStart = (product) => {\n//     return async (dispatch, getState) => {\n//         try {\n//             dispatch({ type: actionTypes.EDIT_PRODUCT_START });\n//             let res = await handleEditProductService(product);\n//             if (res && res.errCode === 0) {\n//                 dispatch(editProductSuccess());\n//                 dispatch(getAllProductStart());\n//             } else {\n//                 dispatch(editProductFailed());\n//             }\n//         } catch (e) {\n//             dispatch(editProductFailed());\n//             console.log('editProductFailed err: ', e);\n//         }\n//     }\n// }\n// export const editProductSuccess = () => ({\n//     type: actionTypes.EDIT_PRODUCT_SUCCESS,\n// })\n// export const editProductFailed = () => ({\n//     type: actionTypes.EDIT_PRODUCT_FAILED\n// })","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/postsActions.js"],"names":["actionTypes","handleGetAllProducts","handleGetAllCodeService","handleCreateProductService","handleDeleteProductService","handleEditProductService","Toast","toast","getAllProductStart","dispatch","getState","type","GET_ALL_PRODUCT_START","res","errCode","getAllProductSuccess","data","reverse","getAllProductFailed","e","console","log","GET_ALL_PRODUCT_SUCCESS","products","GET_ALL_PRODUCT_FAILED"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,EAAwDC,0BAAxD,EAAoFC,0BAApF,EAAgHC,wBAAhH,QAAgJ,+BAAhJ;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACpC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjC,QAAI;AACAD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEX,WAAW,CAACY;AAApB,OAAD,CAAR;AACA,UAAIC,GAAG,GAAG,MAAMZ,oBAAoB,CAAC,KAAD,CAApC;;AACA,UAAIY,GAAG,IAAIA,GAAG,CAACC,OAAJ,KAAgB,CAA3B,EAA8B;AAC1BL,QAAAA,QAAQ,CAACM,oBAAoB,CAACF,GAAG,CAACG,IAAJ,CAASC,OAAT,EAAD,CAArB,CAAR;AACH,OAFD,MAEO;AACHR,QAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACH;AACJ,KARD,CAQE,OAAOC,CAAP,EAAU;AACRV,MAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,CAAzC;AACH;AACJ,GAbD;AAcH,CAfM;AAgBP,OAAO,MAAMJ,oBAAoB,GAAIC,IAAD,KAAW;AAC3CL,EAAAA,IAAI,EAAEX,WAAW,CAACsB,uBADyB;AAE3CC,EAAAA,QAAQ,EAAEP;AAFiC,CAAX,CAA7B;AAIP,OAAO,MAAME,mBAAmB,GAAG,OAAO;AACtCP,EAAAA,IAAI,EAAEX,WAAW,CAACwB;AADoB,CAAP,CAA5B,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { handleGetAllProducts, handleGetAllCodeService, handleCreateProductService, handleDeleteProductService, handleEditProductService } from '../../services/ProductService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllProductStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n            let res = await handleGetAllProducts(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getAllProductSuccess(res.data.reverse()));\r\n            } else {\r\n                dispatch(getAllProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllProductFailed());\r\n            console.log('getAllProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllProductSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n    products: data\r\n})\r\nexport const getAllProductFailed = () => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n})\r\n\r\n// export const getTypeStart = () => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.GET_TYPE_START })\r\n//             let res = await handleGetAllCodeService('CATEGORY');\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(getTypeSuccess(res.data));\r\n//             } else {\r\n//                 dispatch(getTypeFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(getTypeFailed());\r\n//             console.log('getTypeFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const getTypeSuccess = (data) => ({\r\n//     type: actionTypes.GET_TYPE_SUCCESS,\r\n//     types: data\r\n// })\r\n\r\n// export const getTypeFailed = () => ({\r\n//     type: actionTypes.GET_TYPE_FAILED\r\n// })\r\n\r\n// export const getStatusStart = () => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.GET_STATUS_START })\r\n//             let res = await handleGetAllCodeService('STATUS');\r\n//             console.log('check res: ', res);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(getStatusSuccess(res.data));\r\n//             } else {\r\n//                 dispatch(getStatusFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(getStatusFailed());\r\n//             console.log('getStatusFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const getStatusSuccess = (data) => ({\r\n//     type: actionTypes.GET_STATUS_SUCCESS,\r\n//     statusProduct: data\r\n// })\r\n// export const getStatusFailed = () => ({\r\n//     type: actionTypes.GET_STATUS_FAILED\r\n// })\r\n\r\n// export const createProductStart = (dataInput) => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.CREATE_PRODUCT_START })\r\n//             let res = await handleCreateProductService(dataInput);\r\n//             console.log('check res: ', res);\r\n//             if (res && res.message.errCode === 0) {\r\n//                 dispatch(createProductSuccess());\r\n//                 dispatch(getAllProductStart());\r\n//             } else {\r\n//                 dispatch(createProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(createProductFailed());\r\n//             console.log('createProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const createProductSuccess = (data) => ({\r\n//     type: actionTypes.CREATE_PRODUCT_SUCCESS,\r\n// })\r\n\r\n// export const createProductFailed = () => ({\r\n//     type: actionTypes.CREATE_PRODUCT_FAILED\r\n// })\r\n\r\n// export const deleteProductStart = (id) => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.DELETE_PRODUCT_START });\r\n//             let res = await handleDeleteProductService(id);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(deleteProductSuccess());\r\n//                 dispatch(getAllProductStart());\r\n//             } else {\r\n//                 dispatch(deleteProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             //dispatch(deleteProductFailed());\r\n//             console.log('deleteProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const deleteProductSuccess = (data) => ({\r\n//     type: actionTypes.DELETE_PRODUCT_SUCCESS,\r\n// })\r\n\r\n// export const deleteProductFailed = () => ({\r\n//     type: actionTypes.DELETE_PRODUCT_FAILED\r\n// })\r\n\r\n// export const editProductStart = (product) => {\r\n//     return async (dispatch, getState) => {\r\n//         try {\r\n//             dispatch({ type: actionTypes.EDIT_PRODUCT_START });\r\n//             let res = await handleEditProductService(product);\r\n//             if (res && res.errCode === 0) {\r\n//                 dispatch(editProductSuccess());\r\n//                 dispatch(getAllProductStart());\r\n//             } else {\r\n//                 dispatch(editProductFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(editProductFailed());\r\n//             console.log('editProductFailed err: ', e);\r\n//         }\r\n//     }\r\n// }\r\n// export const editProductSuccess = () => ({\r\n//     type: actionTypes.EDIT_PRODUCT_SUCCESS,\r\n// })\r\n\r\n// export const editProductFailed = () => ({\r\n//     type: actionTypes.EDIT_PRODUCT_FAILED\r\n// })"]},"metadata":{},"sourceType":"module"}