{"ast":null,"code":"var _jsxFileName = \"E:\\\\fullstack\\\\reactjs\\\\src\\\\routes\\\\Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { push } from \"connected-react-router\";\nimport * as actions from \"../store/actions\";\nimport { KeyCodeUtils, LanguageUtils } from \"../utils\";\nimport userIcon from \"../../src/assets/images/user.svg\";\nimport passIcon from \"../../src/assets/images/pass.svg\";\nimport './Login.scss';\nimport { FormattedMessage } from 'react-intl';\nimport adminService from '../services/adminService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      username: '',\n      password: '',\n      loginError: ''\n    };\n    this.state = { ...this.initialState\n    };\n\n    this.refresh = () => {\n      this.setState({ ...this.initialState\n      });\n    };\n\n    this.onUsernameChange = e => {\n      this.setState({\n        username: e.target.value\n      });\n    };\n\n    this.onPasswordChange = e => {\n      this.setState({\n        password: e.target.value\n      });\n    };\n\n    this.redirectToSystemPage = () => {\n      const {\n        navigate\n      } = this.props;\n      const redirectPath = '/system/user-manage';\n      navigate(`${redirectPath}`);\n    };\n\n    this.processLogin = () => {\n      const {\n        username,\n        password\n      } = this.state;\n      const {\n        adminLoginSuccess,\n        adminLoginFail\n      } = this.props;\n      let loginBody = {\n        username: 'admin',\n        password: '123456'\n      }; //sucess\n\n      let adminInfo = {\n        \"tlid\": \"0\",\n        \"tlfullname\": \"Administrator\",\n        \"custype\": \"A\",\n        \"accessToken\": \"eyJhbGciOiJIU\"\n      };\n      adminLoginSuccess(adminInfo);\n      this.refresh();\n      this.redirectToSystemPage();\n\n      try {\n        adminService.login(loginBody);\n      } catch (e) {\n        console.log('error login : ', e);\n      }\n    };\n\n    this.handlerKeyDown = event => {\n      const keyCode = event.which || event.keyCode;\n\n      if (keyCode === KeyCodeUtils.ENTER) {\n        event.preventDefault();\n        if (!this.btnLogin.current || this.btnLogin.current.disabled) return;\n        this.btnLogin.current.click();\n      }\n    };\n\n    this.btnLogin = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handlerKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handlerKeyDown); // fix Warning: Can't perform a React state update on an unmounted component\n\n    this.setState = (state, callback) => {\n      return;\n    };\n  }\n\n  render() {\n    const {\n      username,\n      password,\n      loginError\n    } = this.state;\n    const {\n      lang\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form_login\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"title\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"login.login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group icon-true\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"icon\",\n              src: userIcon,\n              alt: \"this\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: LanguageUtils.getMessageByKey(\"login.username\", lang),\n              id: \"username\",\n              name: \"username\",\n              type: \"text\",\n              className: \"form-control\",\n              value: username,\n              onChange: this.onUsernameChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"phone-input-container\",\n            className: \"form-group icon-true\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"icon\",\n              src: passIcon,\n              alt: \"this\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: LanguageUtils.getMessageByKey(\"login.password\", lang),\n              id: \"password\",\n              name: \"password\",\n              type: \"password\",\n              className: \"form-control\",\n              value: password,\n              onChange: this.onPasswordChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), loginError !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login-error\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"login-error-message\",\n              children: loginError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group login\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: this.btnLogin,\n              id: \"btnLogin\",\n              type: \"submit\",\n              className: \"btn\",\n              value: LanguageUtils.getMessageByKey(\"login.login\", lang),\n              onClick: this.processLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lang: state.app.language\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    navigate: path => dispatch(push(path)),\n    adminLoginSuccess: adminInfo => dispatch(actions.adminLoginSuccess(adminInfo)),\n    adminLoginFail: () => dispatch(actions.adminLoginFail())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["E:/fullstack/reactjs/src/routes/Login.js"],"names":["React","Component","connect","push","actions","KeyCodeUtils","LanguageUtils","FormattedMessage","adminService","Login","constructor","props","initialState","username","password","loginError","state","refresh","setState","onUsernameChange","e","target","value","onPasswordChange","redirectToSystemPage","navigate","redirectPath","processLogin","adminLoginSuccess","adminLoginFail","loginBody","adminInfo","login","console","log","handlerKeyDown","event","keyCode","which","ENTER","preventDefault","btnLogin","current","disabled","click","createRef","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","callback","render","lang","userIcon","getMessageByKey","passIcon","mapStateToProps","app","language","mapDispatchToProps","dispatch","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\nimport * as actions from \"../store/actions\";\r\nimport { KeyCodeUtils, LanguageUtils } from \"../utils\";\r\n\r\nimport userIcon from '../../src/assets/images/user.svg';\r\nimport passIcon from '../../src/assets/images/pass.svg';\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport adminService from '../services/adminService';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.btnLogin = React.createRef();\r\n    }\r\n\r\n    initialState = {\r\n        username: '',\r\n        password: '',\r\n        loginError: ''\r\n    }\r\n\r\n    state = {\r\n        ...this.initialState\r\n    };\r\n\r\n    refresh = () => {\r\n        this.setState({\r\n            ...this.initialState\r\n        })\r\n    }\r\n\r\n    onUsernameChange = (e) => {\r\n        this.setState({ username: e.target.value })\r\n    }\r\n\r\n    onPasswordChange = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n    redirectToSystemPage = () => {\r\n        const { navigate } = this.props;\r\n        const redirectPath = '/system/user-manage';\r\n        navigate(`${redirectPath}`);\r\n    }\r\n\r\n    processLogin = () => {\r\n        const { username, password } = this.state;\r\n\r\n        const { adminLoginSuccess, adminLoginFail } = this.props;\r\n        let loginBody = {\r\n            username: 'admin',\r\n            password: '123456'\r\n        }\r\n        //sucess\r\n        let adminInfo = {\r\n            \"tlid\": \"0\",\r\n            \"tlfullname\": \"Administrator\",\r\n            \"custype\": \"A\",\r\n            \"accessToken\": \"eyJhbGciOiJIU\"\r\n        }\r\n\r\n        adminLoginSuccess(adminInfo);\r\n        this.refresh();\r\n        this.redirectToSystemPage();\r\n        try {\r\n            adminService.login(loginBody)\r\n        } catch (e) {\r\n            console.log('error login : ', e)\r\n        }\r\n\r\n    }\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            if (!this.btnLogin.current || this.btnLogin.current.disabled) return;\r\n            this.btnLogin.current.click();\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handlerKeyDown);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handlerKeyDown);\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state, callback) => {\r\n            return;\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { username, password, loginError } = this.state;\r\n        const { lang } = this.props;\r\n\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"form_login\">\r\n                        <h2 className=\"title\">\r\n                            <FormattedMessage id=\"login.login\" />\r\n                        </h2>\r\n                        <div className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={userIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.username\", lang)}\r\n                                id=\"username\"\r\n                                name=\"username\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={username}\r\n                                onChange={this.onUsernameChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div id=\"phone-input-container\" className=\"form-group icon-true\">\r\n                            <img className=\"icon\" src={passIcon} alt=\"this\" />\r\n                            <input\r\n                                placeholder={LanguageUtils.getMessageByKey(\"login.password\", lang)}\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                value={password}\r\n                                onChange={this.onPasswordChange}\r\n                            />\r\n                        </div>\r\n\r\n                        {loginError !== '' && (\r\n                            <div className='login-error'>\r\n                                <span className='login-error-message'>{loginError}</span>\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"form-group login\">\r\n                            <input\r\n                                ref={this.btnLogin}\r\n                                id=\"btnLogin\"\r\n                                type=\"submit\"\r\n                                className=\"btn\"\r\n                                value={LanguageUtils.getMessageByKey(\"login.login\", lang)}\r\n                                onClick={this.processLogin}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        lang: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        adminLoginSuccess: (adminInfo) => dispatch(actions.adminLoginSuccess(adminInfo)),\r\n        adminLoginFail: () => dispatch(actions.adminLoginFail()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"]},"metadata":{},"sourceType":"module"}