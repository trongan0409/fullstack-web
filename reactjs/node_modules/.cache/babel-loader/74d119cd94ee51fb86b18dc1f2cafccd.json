{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { handleGetAllProducts, handleGetAllCodeService } from '../../services/ProductService';\nimport { Toast, toast } from 'react-toastify';\nexport const getAllProductStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_ALL_PRODUCT_START\n      });\n      let res = await handleGetAllProducts(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(getAllProductSuccess(res.data.reverse()));\n      } else {\n        dispatch(getAllProductFailed());\n      }\n    } catch (e) {\n      dispatch(getAllProductFailed());\n      console.log('getAllProductFailed err: ', e);\n    }\n  };\n};\nexport const getAllProductSuccess = data => ({\n  type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\n  products: data\n});\nexport const getAllProductFailed = () => ({\n  type: actionTypes.GET_ALL_PRODUCT_FAILED\n});\nexport const getAllCodeStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.GET_ALL_PRODUCT_START\n      });\n      let res = await handleGetAllCodeService(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(getAllCodeSuccess(res.data.reverse()));\n      } else {\n        dispatch(getAllProductFailed());\n      }\n    } catch (e) {\n      dispatch(getAllCodeFailed());\n      console.log('getAllCodeFailed err: ', e);\n    }\n  };\n};\nexport const getAllCodeSuccess = data => ({\n  type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\n  products: data\n});\nexport const getAllCodeFailed = () => ({\n  type: actionTypes.GET_ALL_PRODUCT_FAILED\n});","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/productActions.js"],"names":["actionTypes","handleGetAllProducts","handleGetAllCodeService","Toast","toast","getAllProductStart","dispatch","getState","type","GET_ALL_PRODUCT_START","res","errCode","getAllProductSuccess","data","reverse","getAllProductFailed","e","console","log","GET_ALL_PRODUCT_SUCCESS","products","GET_ALL_PRODUCT_FAILED","getAllCodeStart","getAllCodeSuccess","getAllCodeFailed"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,QAA8D,+BAA9D;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACpC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjC,QAAI;AACAD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,WAAW,CAACS;AAApB,OAAD,CAAR;AACA,UAAIC,GAAG,GAAG,MAAMT,oBAAoB,CAAC,KAAD,CAApC;;AACA,UAAIS,GAAG,IAAIA,GAAG,CAACC,OAAJ,KAAgB,CAA3B,EAA8B;AAC1BL,QAAAA,QAAQ,CAACM,oBAAoB,CAACF,GAAG,CAACG,IAAJ,CAASC,OAAT,EAAD,CAArB,CAAR;AACH,OAFD,MAEO;AACHR,QAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACH;AACJ,KARD,CAQE,OAAOC,CAAP,EAAU;AACRV,MAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,CAAzC;AACH;AACJ,GAbD;AAcH,CAfM;AAgBP,OAAO,MAAMJ,oBAAoB,GAAIC,IAAD,KAAW;AAC3CL,EAAAA,IAAI,EAAER,WAAW,CAACmB,uBADyB;AAE3CC,EAAAA,QAAQ,EAAEP;AAFiC,CAAX,CAA7B;AAIP,OAAO,MAAME,mBAAmB,GAAG,OAAO;AACtCP,EAAAA,IAAI,EAAER,WAAW,CAACqB;AADoB,CAAP,CAA5B;AAIP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAO,OAAOhB,QAAP,EAAiBC,QAAjB,KAA8B;AACjC,QAAI;AACAD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,WAAW,CAACS;AAApB,OAAD,CAAR;AACA,UAAIC,GAAG,GAAG,MAAMR,uBAAuB,CAAC,KAAD,CAAvC;;AACA,UAAIQ,GAAG,IAAIA,GAAG,CAACC,OAAJ,KAAgB,CAA3B,EAA8B;AAC1BL,QAAAA,QAAQ,CAACiB,iBAAiB,CAACb,GAAG,CAACG,IAAJ,CAASC,OAAT,EAAD,CAAlB,CAAR;AACH,OAFD,MAEO;AACHR,QAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACH;AACJ,KARD,CAQE,OAAOC,CAAP,EAAU;AACRV,MAAAA,QAAQ,CAACkB,gBAAgB,EAAjB,CAAR;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,CAAtC;AACH;AACJ,GAbD;AAcH,CAfM;AAgBP,OAAO,MAAMO,iBAAiB,GAAIV,IAAD,KAAW;AACxCL,EAAAA,IAAI,EAAER,WAAW,CAACmB,uBADsB;AAExCC,EAAAA,QAAQ,EAAEP;AAF8B,CAAX,CAA1B;AAKP,OAAO,MAAMW,gBAAgB,GAAG,OAAO;AACnChB,EAAAA,IAAI,EAAER,WAAW,CAACqB;AADiB,CAAP,CAAzB","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { handleGetAllProducts, handleGetAllCodeService } from '../../services/ProductService';\r\nimport { Toast, toast } from 'react-toastify';\r\n\r\nexport const getAllProductStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n            let res = await handleGetAllProducts(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getAllProductSuccess(res.data.reverse()));\r\n            } else {\r\n                dispatch(getAllProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllProductFailed());\r\n            console.log('getAllProductFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllProductSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n    products: data\r\n})\r\nexport const getAllProductFailed = () => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n})\r\n\r\nexport const getAllCodeStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.GET_ALL_PRODUCT_START })\r\n            let res = await handleGetAllCodeService(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(getAllCodeSuccess(res.data.reverse()));\r\n            } else {\r\n                dispatch(getAllProductFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(getAllCodeFailed());\r\n            console.log('getAllCodeFailed err: ', e);\r\n        }\r\n    }\r\n}\r\nexport const getAllCodeSuccess = (data) => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_SUCCESS,\r\n    products: data\r\n})\r\n\r\nexport const getAllCodeFailed = () => ({\r\n    type: actionTypes.GET_ALL_PRODUCT_FAILED\r\n})"]},"metadata":{},"sourceType":"module"}