{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { getAllCodeService, createNewUserService } from '../../services/userService'; // export const fetchGenderStart = () => ({\n//     type: actionTypes.FETCH_GENDER_START\n// })\n\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeService(\"GENDER\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data));\n      } else {\n        dispatch(fetchGenderFailed());\n      }\n    } catch (e) {\n      dispatch(fetchGenderFailed());\n      console.log('fetchGenderData err: ', e);\n    }\n  };\n};\nexport const fetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\nexport const fetchGenderFailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAILED\n});\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_ROLE_START\n      });\n      let res = await getAllCodeService(\"ROLE\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data));\n      } else {\n        dispatch(fetchRoleFailed());\n      }\n    } catch (e) {\n      dispatch(fetchRoleFailed());\n      console.log('fetchRoleData err: ', e);\n    }\n  };\n};\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRoleFailed = () => ({\n  type: actionTypes.FETCH_ROLE_FAILED\n});\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n      console.log('check create user redux', res);\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess());\n      } else {\n        dispatch(fetchRoleFailed());\n      }\n    } catch (e) {\n      dispatch(fetchRoleFailed());\n      console.log('createUserFailed err: ', e);\n    }\n  };\n};","map":{"version":3,"sources":["E:/fullstack/reactjs/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createNewUserService","fetchGenderStart","dispatch","getState","type","FETCH_GENDER_START","res","errCode","fetchGenderSuccess","data","fetchGenderFailed","e","console","log","genderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","fetchRoleStart","FETCH_ROLE_START","fetchRoleSuccess","fetchRoleFailed","roleData","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILED","createNewUser"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { getAllCodeService, createNewUserService } from '../../services/userService';\r\n\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_GENDER_START })\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderData err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED\r\n})\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_ROLE_START })\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log('fetchRoleData err: ', e);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\n\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED\r\n})\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            console.log('check create user redux', res);\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess());\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log('createUserFailed err: ', e);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}